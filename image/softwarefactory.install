#!/bin/bash
#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

dir="$1"

if [ -z "${dir}" ] || [ "${dir}" == "/" ]; then
    echo "usage: $0 root_dir"
    exit 1
fi

ORIG=$(cd $(dirname $0); pwd)
set -e

. ${ORIG}/third_party_tools
. ${ORIG}/functions

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

set -ex

BUNDLE_RETRIES=3

DOCDIR="${ORIG}/../docs"
GERRITHOOKS="${ORIG}/../gerrit-hooks"

BASE_INSTALL=/var/lib/centos-sf
function push_clean_install {
    do_umount
    rsync -a  --exclude="/var/cache/yum/*" --exclude="/usr/share/doc/*" --delete ${BASE_INSTALL}/ ${dir}/
}

function install_base {
    # host requirements
    yum install -y patch sphinx python-sphinx
    # minimal system
    install_packages ${BASE_INSTALL} systemd passwd yum rpm procps-ng iputils sudo openssl hostname cronie policycoreutils-python initscripts patch

    # adds jenkins repo
    http_fetch http://pkg.jenkins-ci.org/redhat/jenkins.repo ${BASE_INSTALL}/etc/yum.repos.d/jenkins.repo
    cp /etc/resolv.conf ${BASE_INSTALL}/etc/resolv.conf
    mount -o bind /dev/ ${BASE_INSTALL}/dev; mount -t proc none ${BASE_INSTALL}/proc
    chroot ${BASE_INSTALL} rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
    umount ${BASE_INSTALL}/dev ${BASE_INSTALL}/proc
    rm ${BASE_INSTALL}/etc/resolv.conf


    install_packages ${BASE_INSTALL} epel-release

    DEVEL_PKGS="swig libffi-devel openldap-devel zlib-devel libcurl-devel openssl-devel httpd-devel apr-devel apr-util-devel mariadb-devel gcc-c++ ruby-devel ImageMagick-devel gcc cpp python-devel libxml2-devel libxslt-devel cpp gcc python-devel perl-Time-HiRes"
    SF_PKGS="jenkins java"
    PYTHON_PKGS="python-sqlalchemy python-pbr python-docutils GitPython git-review python-requests python-zmq python-netaddr python-paramiko MySQL-python pytz PyYAML python-mock python-nose pyxattr pylibacl"
    RUBY_PKGS="rubygem-bundler rubygems rubygem-rake rubygem-nokogiri puppet"
    SYSTEM_PKG="httpd mod_wsgi git gcc python python-devel python-pip python-setuptools wget python-ndg_httpsclient python-pyasn1 pyOpenSSL monit postfix git vim-enhanced nodejs mariadb-server python-werkzeug python-babel python-jinja2 MySQL-python mod_wsgi m2crypto mariadb gitweb debootstrap unzip pigz ntp openssl mod_ssl bc ansible sshpass vim-enhanced"

    install_packages ${BASE_INSTALL} $DEVEL_PKGS $SF_PKGS $PYTHON_PKGS $RUBY_PKGS $SYSTEM_PKG

    do_chroot ${BASE_INSTALL} passwd -l root

    #disable jenkins
    rm -f ${BASE_INSTALL}/etc/rc[0-6].d/*jenkins
    push_clean_install
}

function fix_insecure_plateform {
    # get rid of SSL warnings, needs gcc
    retry do_chroot ${dir} pip install pyopenssl
    retry do_chroot ${dir} pip install ndg-httpsclient
    retry do_chroot ${dir} pip install pyasn1
}

function prepare_chroot {
    ## Prepare chroot
    cp /etc/resolv.conf ${dir}/etc/resolv.conf
    grep -q ${dir}/proc /proc/mounts || mount -t proc none ${dir}/proc
    grep -q ${dir}/dev /proc/mounts || mount -o bind /dev ${dir}/dev
}

function install_bup_run {
    [ -d ${dir}/opt/bup ] || install_bup ${dir}
}
function install_mod_authpub_tkt {
    # Install mod authpub tkt for apache (SSO)
    http_fetch $MOD_AUTH_PUBTKT_URL ${dir}/tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}.tar.gz
    do_chroot ${dir} bash -c "cd /tmp && tar -xvzf mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}.tar.gz"
    do_chroot ${dir} bash -c "cd /tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION} && ./configure --apxs=/usr/bin/apxs && make && make install"
    do_chroot ${dir} rm -Rf /tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}
}

function install_passenger {
    HOME=/root do_chroot ${dir} gem install passenger --version ${PASSENGER_VERSION}
    HOME=/root do_chroot ${dir} passenger-install-apache2-module -a
    ln -s /usr/local/share/gems/gems/passenger-${PASSENGER_VERSION} ${dir}/usr/lib/passenger
}

function install_redmine {
    # Install Passenger for Redmine
    mkdir -p ${dir}/var/www/html
    mkdir -p ${dir}/var/log/httpd
    # Install Redmine
    http_fetch $REDMINE_RHEL_URL ${dir}/usr/share/redmine.tar.gz
    do_chroot ${dir} bash -c "cd /usr/share && tar -xzpf redmine.tar.gz && mv redmine-${REDMINE_VERSION} redmine && chown -R root:root redmine"

    # We install this fake database file in order to force the bundle to activate the mysql2 lib
    # Redmine puppet manifest will overwrite it
    cat > ${dir}/usr/share/redmine/config/database.yml <<EOF
production:
  adapter: mysql2
  database: redmine
  host: localhost
  username: root
  password: ""
  encoding: utf8
EOF
    HOME=/root do_chroot ${dir} bash -c "cd /usr/share/redmine && bundle install" # --retry $BUNDLE_RETRIES"
    # Install Redmine backlog plugin
    do_chroot ${dir} mkdir -p /usr/share/redmine/plugins
    retry do_chroot ${dir} git clone $REDMINE_BACKLOG_URL /usr/share/redmine/plugins/redmine_backlogs
    # An update of holidays gem 10/12/2014 to 1.0.7 leads to unable to deploy the backlog plugin
    # Check later if we can safely remove that :
    cd ${dir}/usr/share/redmine/plugins/redmine_backlogs
    sed -i 's/gem \"holidays\", \"~>1.0.3\"/gem \"holidays\", \"=1.0.6\"/' Gemfile
    cd -
    HOME=/root do_chroot ${dir} bash -c "cd /usr/share/redmine/plugins/redmine_backlogs && bundle install" # --retry $BUNDLE_RETRIES"
    HOME=/root do_chroot ${dir} bash -c 'cd /usr/share/redmine && bundle update'

    # Install Redmine http plugin
    retry do_chroot ${dir} git clone $REDMINE_HTTP_PLUGIN_URL /usr/share/redmine/plugins/redmine_http_auth
}

function install_gerrit {
    # Gerrit
    mkdir ${dir}/root/gerrit_data_source/
    http_fetch $GERRIT_URL ${dir}/root/gerrit_data_source/gerrit.war
    http_fetch $MYSQLJAVA_URL ${dir}/root/gerrit_data_source/mysql-connector-java.jar
    http_fetch $BCPROVJAVA_URL ${dir}/root/gerrit_data_source/bcprov.jar
    http_fetch $BCPKIXJAVA_URL ${dir}/root/gerrit_data_source/bcpkix.jar
}

function install_puppetmaster {
    mkdir -p ${dir}/usr/share/puppet/rack/puppetmasterd
    mkdir -p ${dir}/usr/share/puppet/rack/puppetmasterd/public ${dir}/usr/share/puppet/rack/puppetmasterd/tmp
    cp ${dir}/usr/share/puppet/ext/rack/config.ru ${dir}/usr/share/puppet/rack/puppetmasterd/
    do_chroot ${dir} chown puppet:puppet /usr/share/puppet/rack/puppetmasterd/config.ru

    # Bug https://tickets.puppetlabs.com/browse/PUP-1386
    cat >> ${dir}/usr/share/puppet/rack/puppetmasterd/config.ru <<EOF
Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8
EOF

    passenger_version=$(do_chroot ${dir} gem list | grep passenger | awk '{print $2}' |sed 's/[)(]//g')

    # do not enable by default as without cert it'll fail
    cat > ${dir}/etc/httpd/conf.d/puppetmaster.conf.disabled <<EOF
LoadModule passenger_module /usr/local/share/gems/gems/passenger-${passenger_version}/buildout/apache2/mod_passenger.so
PassengerRoot /usr/local/share/gems/gems/passenger-${passenger_version}
PassengerRuby /usr/bin/ruby
PassengerHighPerformance on
PassengerMaxPoolSize 12
PassengerPoolIdleTime 1500
PassengerStatThrottleRate 120
Listen 8140

<VirtualHost *:8140>
        SSLEngine on
        SSLProtocol             ALL -SSLv2
        SSLCipherSuite          ALL:!aNULL:!eNULL:!DES:!3DES:!IDEA:!SEED:!DSS:!PSK:!RC4:!MD5:+HIGH:+MEDIUM:!LOW:!SSLv2:!EXP
        SSLHonorCipherOrder     on

        SSLCertificateFile      /var/lib/puppet/ssl/certs/mycert.pem
        SSLCertificateKeyFile   /var/lib/puppet/ssl/private_keys/mycert.pem
        SSLCertificateChainFile /var/lib/puppet/ssl/certs/ca.pem
        SSLCACertificateFile    /var/lib/puppet/ssl/certs/ca.pem
        SSLVerifyClient optional
        SSLVerifyDepth  1
        SSLOptions +StdEnvVars +ExportCertData
        RequestHeader unset X-Forwarded-For
        RequestHeader set X-SSL-Subject %{SSL_CLIENT_S_DN}e
        RequestHeader set X-Client-DN %{SSL_CLIENT_S_DN}e
        RequestHeader set X-Client-Verify %{SSL_CLIENT_VERIFY}e
        DocumentRoot /usr/share/puppet/rack/puppetmasterd/public/
        RackBaseURI /
        <Directory /usr/share/puppet/rack/puppetmasterd/>
                Options None
                AllowOverride None
                Order allow,deny
                allow from all
        </Directory>
</VirtualHost>
EOF
}

function install_sf {
    cp -Rf $GERRITHOOKS ${dir}/root/gerrit_data_source/
    # Include topmenu in Etherpad
    cat << EOF | patch ${dir}/var/www/etherpad-lite/src/templates/index.html || true
38a39
>         <script type="text/javascript" src="/static/js/topmenu.js"></script>
53d53
<               border-top: 8px solid rgba(51,51,51,.8);
EOF

cat << EOF | patch ${dir}/var/www/etherpad-lite/src/templates/pad.html || true
50a51
>         <script type="text/javascript" src="/static/js/topmenu.js"></script>
EOF
    # Include topmenu in Paste
    cat << EOF | patch ${dir}/srv/lodgeit/lodgeit/lodgeit/views/layout.html || true
11a12
>     <script type="text/javascript" src="/static/js/topmenu.js"></script>
EOF

    # install pysflib.
    [ -d ${dir}/var/www/pysflib ] || git clone http://softwarefactory.enovance.com/r/pysflib ${dir}/var/www/pysflib
    retry do_chroot ${dir} bash -c "cd /var/www/pysflib && pip install -r requirements.txt"
    do_chroot ${dir} bash -c "cd /var/www/pysflib && python setup.py install"

    # Cauth server.
    [ -d ${dir}/var/www/cauth ] || git clone http://softwarefactory.enovance.com/r/cauth ${dir}/var/www/cauth
    # override pysflib version from requirements
    do_chroot ${dir} sed -i '/pysflib/d' /var/www/cauth/requirements.txt
    retry do_chroot ${dir} bash -c "cd /var/www/cauth && SWIG_FEATURES='-cpperraswarn -includeall -I/usr/include/openssl' pip install -r requirements.txt"
    do_chroot ${dir} bash -c "cd /var/www/cauth && python setup.py install"

    # Managesf.
    [ -d ${dir}/var/www/managesf ] || git clone http://softwarefactory.enovance.com/r/managesf ${dir}/var/www/managesf
    # override pysflib version from requirements
    do_chroot ${dir} sed -i '/pysflib/d' /var/www/managesf/requirements.txt
    retry do_chroot ${dir} bash -c "cd /var/www/managesf && pip install -r requirements.txt"
    do_chroot ${dir} bash -c "cd /var/www/managesf && python setup.py install"

    # Documentation
    DOCBUILDDIR=/tmp/_build
    [ ! -d "${dir}/var/www/docs" ] && mkdir ${dir}/var/www/docs
    cd ${DOCDIR} && make BUILDDIR=$DOCBUILDDIR MANAGESF_CLONED_PATH=${dir}/var/www/managesf html ; cd -
    cp -r $DOCBUILDDIR/html/* ${dir}/var/www/docs/
    rm -rf $DOCBUILDDIR

    # Fix /var/www permissions
    do_chroot ${dir} chmod -R 0644 /var/www
    do_chroot ${dir} find /var/www -type d -exec chmod 0755 {} \;
    do_chroot ${dir} chown -R apache:apache /var/www
}

function install_fonts {
    # Twitter Bootstrap - http://getbootstrap.com/
    http_fetch $BOOTSTRAP_URL ${dir}/tmp/bootstrap.zip
    do_chroot ${dir} unzip -q -o /tmp/bootstrap.zip -d /var/www/static/
    do_chroot ${dir} mv /var/www/static/bootstrap-${BOOTSTRAP_VERSION}-dist /var/www/static/bootstrap
    do_chroot ${dir} rm /tmp/bootstrap.zip

    # Font Awesome - http://fortawesome.github.io/Font-Awesome/
    http_fetch $FONTAWESOME_URL ${dir}/tmp/font-awesome.zip
    do_chroot ${dir} unzip -q -o /tmp/font-awesome.zip -d /var/www/static/
    do_chroot ${dir} mv /var/www/static/Font-Awesome-${FONTAWESOME_VERSION} /var/www/static/font-awesome
    do_chroot ${dir} rm /tmp/font-awesome.zip

    do_chroot ${dir} mkdir /var/www/static/js
    # JQuery - http://jquery.com/
    http_fetch $JQUERY_URL ${dir}/var/www/static/js/jquery.min.js
    # AngularJS
    http_fetch $ANGULARJS_URL ${dir}/var/www/static/js/angular.min.js
}

function install_zuul {
    # zuul
    retry do_chroot ${dir} git clone ${ZUUL_URL} /srv/zuul
    do_chroot ${dir} bash -c "cd /srv/zuul && git checkout -b working ${ZUUL_VERSION}"
    # Install dependencies first
    retry do_chroot ${dir} bash -c "cd /srv/zuul && pip install -U -r requirements.txt"
    retry do_chroot ${dir} pip install APScheduler==${APSCHEDULER_VERSION}
    do_chroot ${dir} bash -c "cd /srv/zuul && python /srv/zuul/setup.py install"
    do_chroot ${dir} ln -s /var/www/static/bootstrap /srv/zuul/etc/status/public_html/bootstrap
    http_fetch $JQUERY_VISIBILITY_URL ${dir}/srv/zuul/etc/status/public_html/jquery-visibility.min.js
    http_fetch $JQUERY_GRAPHITE_URL ${dir}/srv/zuul/etc/status/public_html/jquery.graphite.js
    do_chroot ${dir} cp /var/www/static/js/jquery.min.js /srv/zuul/etc/status/public_html/jquery.min.js
}
function install_nodepool {
    # nodepool
    retry do_chroot ${dir} pip install nodepool
}
function install_etherpad {
    # Etherpad_lite
    http_fetch $ETHERPAD_LITE_URL ${dir}/tmp/etherpad_lite.tar.gz
    http_fetch $NODEJS_NPM ${dir}/tmp/npm-install.sh
    ## Try to avoid the failure in jenkins
    do_chroot ${dir} sed -i "s#</dev/tty##" /tmp/npm-install.sh
    [ ! -d "${dir}/var/www/etherpad-lite" ] && mkdir -p ${dir}/var/www/etherpad-lite
    do_chroot ${dir} tar -xzf /tmp/etherpad_lite.tar.gz --strip-components=1 -C /var/www/etherpad-lite
    # /bin/installDeps.sh is looking for /usr/bin/node
    [ ! -e "${dir}/usr/bin/node" ] && do_chroot ${dir} ln -s /usr/bin/nodejs /usr/bin/node
    # Node or npm seems to deals with SUDO_UID and SUDO_GID that for results set new created
    # files as user id/gid referenced by sudo. So force id/gid to 0 (root)
    SUDO_UID=0 SUDO_GID=0 HOME=/root npm_install=$NPM_INSTALL do_chroot ${dir} sh /tmp/npm-install.sh
    ## Use a mirror
    do_chroot ${dir} sed -i "s|npm install|npm --registry ${NPM_MIRROR_URL} install|" /var/www/etherpad-lite/bin/installDeps.sh
    SUDO_UID=0 SUDO_GID=0 HOME=/root retry do_chroot ${dir} sh /var/www/etherpad-lite/bin/installDeps.sh
}

function install_paste {
    # Paste (Lodgeit)
    do_chroot ${dir} mkdir -p /srv/lodgeit
    retry do_chroot ${dir} git clone ${PASTE_URL} /srv/lodgeit/lodgeit
    do_chroot ${dir} bash -c "cd /srv/lodgeit/lodgeit && git checkout ${PASTE_VERSION}"

    # Replace absolute URLs beginning with /static/
    do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/layout.html
    do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/help/advanced.html
    do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/help/pasting.html
}
function install_jjb {
    do_chroot ${dir} pip install jenkins-job-builder
    mkdir -p ${dir}/etc/jenkins_jobs
}
function install_jenkins_plugins {
    ## Jenkins Swarm client
    #retry do_chroot ${dir} pip install nose flake8
    #swarm_client=$(basename $JENKINS_SWARM_CLIENT_URL)
    #http_fetch $JENKINS_SWARM_CLIENT_URL ${dir}/var/lib/jenkins/${swarm_client}
    #ln -sf ${swarm_client} ${dir}/var/lib/jenkins/swarm-client-latest.jar

    # Jenkins Swarm plugin
    mkdir -p ${dir}/var/lib/jenkins/plugins
    http_fetch $JENKINS_SWARM_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_SWARM_PLUGIN_URL)

    # Jenkins theme plugin
    http_fetch $JENKINS_THEME_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_THEME_PLUGIN_URL)

    # Jenkins credentials plugin
    http_fetch $JENKINS_CREDENTIALS_BINDING_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_CREDENTIALS_BINDING_URL)
    # http_fetch $JENKINS_CREDENTIALS_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_CREDENTIALS_URL)
    http_fetch $JENKINS_WORKFLOW_STEP_API_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_WORKFLOW_STEP_API_URL)
    http_fetch $JENKINS_PLAIN_CREDENTIALS_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_PLAIN_CREDENTIALS_URL)

    JENKINS_URL=https://updates.jenkins-ci.org/download/plugins
    JENKINS_PLUGINS="ssh-agent/1.4.1/ssh-agent.hpi \
                 gearman-plugin/0.1.1/gearman-plugin.hpi \
                 promoted-builds/2.17/promoted-builds.hpi \
                 git-client/1.9.0/git-client.hpi \
                 scm-api/0.2/scm-api.hpi \
                 parameterized-trigger/2.24/parameterized-trigger.hpi \
                 token-macro/1.10/token-macro.hpi \
                 multiple-scms/0.3/multiple-scms.hpi \
                 ansicolor/0.4.0/ansicolor.hpi \
                 git/2.2.1/git.hpi \
                 reverse-proxy-auth-plugin/1.4.0/reverse-proxy-auth-plugin.hpi"

    for plugin in ${JENKINS_PLUGINS}; do
        plugin_name=$(basename ${plugin})
        echo "Installing plugin ${plugin_name}"
        http_fetch "${JENKINS_URL}/${plugin}" ${dir}/var/lib/jenkins/plugins/$plugin_name
    done

    do_chroot ${dir} chown -R jenkins /var/lib/jenkins/plugins

    # Jenkins ZMQ event plugin
#    http_fetch $JENKINS_ZMQ_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_ZMQ_PLUGIN_URL)
}

function build {
    install_base
    push_clean_install
    prepare_chroot
    install_puppetmaster
    install_bup_run
    install_mod_authpub_tkt
    install_passenger
    install_redmine
    install_gerrit
    install_fonts
    install_zuul
    install_nodepool
    install_etherpad
    install_paste
    install_jenkins_plugins
    install_jjb
    install_sf
    put_git_mark ${dir}
}

function clean {
    do_umount
    rm -Rf ${dir}/root/.{npm,cache,gem,node-gyp}
    rm -Rf ${dir}/share ${dir}/tmp/* ${dir}/tmp/.* ${dir}/opt/bup/{t,Documentation}
    find ${dir} -type d -name ".git" -exec rm -Rf {} \;
    find ${dir}/var/lib/yum/yumdb/ -type f -exec rm -Rf {} \;
    rm -Rf ${dir}/var/lib/rpm/Packages
}

build
clean

