#!/bin/sh
#

VER=2.2.0

# Version string
SF_PREVIOUS_VER=C7.0-2.1.8

# Set this variable to 1 if we tag and set it back to 0 the commit after the tag
TAGGED_RELEASE=0
REL_VER=$(git log --simplify-merges -n 1 | grep -i 'TaggedRelease:' | awk '{ print $2 }')
if [ ! -z "${REL_VER}" ]; then
    echo "This is release: ${REL_VER}."
    VER=${REL_VER}
    SF_PREVIOUS_VER=C7.0-2.1.2
    echo "Testing upgrade from ${SF_PREVIOUS_VER}"
    TAGGED_RELEASE=1
    # Pinned versions of the subprojects to go with the current release
    PYSFLIB_PINNED_VERSION=028f7121feadd72d761d11f372caf19cfc324925
    MANAGESF_PINNED_VERSION=b6779999f955509d941ffce853b62eb03b1cb2f7
    CAUTH_PINNED_VERSION=29188b1d50dbc462c10f68be345d658e4abb8e5f
    SFMANAGER_PINNED_VERSION=3fcad5cbd64f5da044d94a4fc2bd32224def5d03
fi

SF_VER=${SF_VER:-C7.0-${VER}}
RELEASE_GPG_FINGERPRINT=0xE46E04A2344803E5A808BDD7E8C203A71C3BAE4B

export LC_ALL=C

SWIFT_BASE_URL="http://46.231.133.241:8080"
SWIFT_ACCOUNT="sf"
SWIFT_IMAGE_CONTAINER="sf-images"
SWIFT_DOCS_CONTAINER="sf-docs"
# Url where SF roles (software-factory and install-server-vm) are published
SWIFT_SF_URL="${SWIFT_BASE_URL}/v1/AUTH_${SWIFT_ACCOUNT}/${SWIFT_IMAGE_CONTAINER}"
# Url where latest doc is stored
SWIFT_DOCS_URL="${SWIFT_BASE_URL}/v1/AUTH_${SWIFT_ACCOUNT}/${SWIFT_DOCS_CONTAINER}"

# Paths
SF_WORKSPACE="${SF_WORKSPACE:-/var/lib/sf}"
BUILD_DIR="${SF_WORKSPACE}/roles"

UPSTREAM="${BUILD_DIR}/upstream"
CACHE_PATH="${BUILD_DIR}/cache/sf-centos7"
IMAGE_PATH="${BUILD_DIR}/install/${SF_VER}/softwarefactory"

# If this script is run in CI job runner the
# ZUUL_PROJECT will be set
if [ -n "${ZUUL_PROJECT}" ]; then
    DEPS="${WORKSPACE}/deps"
    IN_ZUUL=1
else
    DEPS="${SF_WORKSPACE}/deps"
    IN_ZUUL=0
fi

PYSFLIB_CLONED_PATH="${PYSFLIB_CLONED_PATH:-${DEPS}/pysflib}"
CAUTH_CLONED_PATH="${CAUTH_CLONED_PATH:-${DEPS}/cauth}"
MANAGESF_CLONED_PATH="${MANAGESF_CLONED_PATH:-${DEPS}/managesf}"
SFMANAGER_CLONED_PATH="${SFMANAGER_CLONED_PATH:-${DEPS}/python-sfmanager}"

DOCDIR="${PWD}/docs"
HOT_TEMPLATES="${PWD}/deploy/heat"

# Rebuild cache if these files changed
CACHE_DEPS="./image/softwarefactory.install ./image/third_party_tools ./image/packages"

function prepare_buildenv {
    if [ ! -d "${SF_WORKSPACE}" ]; then
        sudo mkdir -m 0770 "${SF_WORKSPACE}"
        sudo chown ${USER}:root "${SF_WORKSPACE}"
    fi
    bash ./rpm-requirements.sh

    [ ! -d "$BUILD_DIR" ] && sudo mkdir -p $BUILD_DIR
    [ ! -d "$DEPS" ]      && sudo mkdir -p $DEPS && sudo chown ${USER}:root $DEPS
    [ ! -d "$UPSTREAM" ]  && sudo mkdir -p $UPSTREAM
}
