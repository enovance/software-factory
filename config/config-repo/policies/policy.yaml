# Default rules that should not be changed, but can be used as building blocks for more complex rules
'admin_or_service': 'rule:is_admin or rule:is_service'
'admin_api': 'rule:is_admin'
# is_owner applies to API calls where a user is the target. is_owner will be True if the requestor is the target of the action
'is_owner': 'username:%(username)s'
'owner_api': 'rule:is_owner'
'admin_or_owner': 'rule:is_admin or rule:is_owner'
# group checking depending on the target project
'is_ptl': 'group:%(project)s-ptl'
'is_core': 'group:%(project)s-core'
'is_dev': 'group:%(project)s-dev'
'ptl_api': 'rule:is_ptl'
'core_api': 'rule:is_core'
'dev_api': 'rule:is_dev'
'contributor_api': 'rule:ptl_api or rule:core_api or rule:dev_api'

'authenticated_api': 'is_authenticated:True'
'any': '@'
'none': '!'
# Project API CRUD
'managesf.project:get_one': 'rule:any'
'managesf.project:get_all': 'rule:any'
'managesf.project:create': 'rule:admin_api'
'managesf.project:delete': 'rule:admin_api or rule:ptl_api'
# Backup API
'managesf.backup:get': 'rule:admin_api'
'managesf.backup:create': 'rule:admin_api'
# Restoration of backup API
'managesf.restore:restore': 'rule:admin_api'
# Project memberships API CRUD
# Assigning or deassigning members to groups for a project obey the following rules:
# - any group if requestor is admin or project PTL
# - core or dev group if requestor is project core
# - dev group if requestor is project dev
'managesf.membership:get': 'rule:any'
'managesf.membership:create': 'rule:admin_api or rule:ptl_api or (rule:core_api and (target.group:core-group or target.group:dev-group)) or (rule:dev_api and target.group:dev-group)'
'managesf.membership:delete': 'rule:admin_api or rule:ptl_api or (rule:core_api and (target.group:core-group or target.group:dev-group)) or (rule:dev_api and target.group:dev-group)'
# Generic group API CRUD
'managesf.group:get': 'rule:authenticated_api'
'managesf.group:create': 'rule:authenticated_api'
'managesf.group:update': 'rule:admin_api or group:%(group)s'
'managesf.group:delete': 'rule:admin_api or group:%(group)s'
# Pages API CRUD
'managesf.pages:get': 'rule:admin_api or rule:ptl_api'
'managesf.pages:create': 'rule:admin_api or rule:ptl_api'
'managesf.pages:delete': 'rule:admin_api or rule:ptl_api'
# local user backend (for local authentication) API CRUD
'managesf.localuser:get': 'rule:authenticated_api'
'managesf.localuser:create_update': 'rule:admin_api or username:%(username)s'
'managesf.localuser:delete': 'rule:admin_api or username:%(username)s'
# This rule should be left alone, or local users will not be able to authenticate
'managesf.localuser:bind': 'rule:any'
# user API CRUD
'managesf.user:get': 'rule:authenticated_api'
'managesf.user:create': 'rule:admin_api or username:%(username)s'
'managesf.user:delete': 'rule:admin_api'
'managesf.user:update': 'rule:admin_api or username:%(username)s'
# htpasswd API
'managesf.htpasswd:get': 'rule:authenticated_api'
'managesf.htpasswd:create_update': 'rule:authenticated_api'
'managesf.htpasswd:delete': 'rule:authenticated_api'
# gerrit hooks API
'managesf.hooks:trigger': 'rule:admin_or_service'
# template tests for projects API
'managesf.tests:add': 'rule:admin_api or rule:ptl_api'
# config (permissions) API
'managesf.config:get': 'rule:authenticated_api'
