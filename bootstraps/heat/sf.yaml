heat_template_version: 2013-05-23

description: >
  Heat SoftwareFactory template.

parameters:
  key_name:
    type: string
    description:  Name of a KeyPair to enable SSH access to the instance
  suffix:
    type: string
    description: Domain suffix to the hostnames
    default: sf.dom
  jenkins_user_pwd:
    type: string
    description: jenkins user password, jenkins slave has to provide this password to connect to master
    default: userpass
  sf_config_content:
    type: string
    description: Base64 yaml configuration file for SoftwareFactory

  puppetmaster_flavor:
    type: string
    description: Flavor for puppetmaster node
  mysql_flavor:
    type: string
    description: Flavor for mysql node
  managesf_flavor:
    type: string
    description: Flavor for managesf node
  gerrit_flavor:
    type: string
    description: Flavor for gerrit node
  redmine_flavor:
    type: string
    description: Flavor for redmine node
  jenkins_flavor:
    type: string
    description: Flavor for jenkins node
  slave_flavor:
    type: string
    description: Flavor for slave node

  puppetmaster_root_size:
    type: string
    description: Root disk size for puppetmaster node
  mysql_root_size:
    type: string
    description: Root disk size for mysql node
  managesf_root_size:
    type: string
    description: Root disk size for managesf node
  gerrit_root_size:
    type: string
    description: Root disk size for gerrit node
  redmine_root_size:
    type: string
    description: Root disk size for redmine node
  jenkins_root_size:
    type: string
    description: Root disk size for jenkins node
  slave_root_size:
    type: string
    description: Root disk size for slave node

  puppetmaster_image_id:
    type: string
    description: Glance image ID for the puppet master node
  sf_image_id:
    type: string
    description: Glance image ID for all the other sf nodes

  nameserver:
    type: string
    description: The nameserver IP used by VMs
    default: 8.8.8.8
  ext_net_uuid:
    type: string
    description: The UUID of the external net
  sg_admin_cidr:
    type: string
    description: From Ip range to access node by ssh
    default: 0.0.0.0/0
  sg_user_cidr:
    type: string
    description: From Ip range to access user services of SF
    default: 0.0.0.0/0

resources:
  sf_net:
    type: OS::Neutron::Net

  sf_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: sf_net }
      cidr: 192.168.0.0/24
      enable_dhcp: true
      dns_nameservers: [ { get_param: nameserver }, ]

  ssh_password:
    type: OS::Heat::RandomString
    properties:
      length: 8

  router:
    type: OS::Neutron::Router

  router_gateway:
    type: OS::Neutron::RouterGateway
    properties:
      router_id: { get_resource: router }
      network_id: { get_param: ext_net_uuid }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: sf_subnet }

  sf_ext_secgroup_admin:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: { get_param: sg_admin_cidr },
         protocol: tcp,
         port_range_min: 22,
         port_range_max: 22,},
        {remote_ip_prefix: { get_param: sg_admin_cidr },
         protocol: icmp,}
        ]

  sf_ext_secgroup_http:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: { get_param: sg_user_cidr },
         protocol: tcp,
         port_range_min: 80,
         port_range_max: 80},
        ]

  sf_ext_secgroup_swarm_slave:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: { get_param: sg_user_cidr },
         protocol: tcp,
         port_range_min: 8080,
         port_range_max: 8080},
        {remote_ip_prefix: { get_param: sg_user_cidr },
         protocol: tcp,
         port_range_min: 45452,
         port_range_max: 45452},
        ]

  sf_ext_secgroup_gerrit_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: { get_param: sg_user_cidr },
         protocol: tcp,
         port_range_min: 29418,
         port_range_max: 29418},
        ]

  sf_int_secgroup_default:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: 192.168.0.0/24,
         protocol: tcp,
         port_range_min: 1,
         port_range_max: 65535},
        {remote_ip_prefix: 192.168.0.0/24,
         protocol: icmp,}
        ]

  jenkins_neutron_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: sf_net }
      security_groups: [ { get_resource: sf_int_secgroup_default },
                         ]

  redmine_neutron_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: sf_net }
      security_groups: [ { get_resource: sf_int_secgroup_default },
                         ]

  gerrit_neutron_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: sf_net }
      security_groups: [ { get_resource: sf_int_secgroup_default },
                         ]

  managesf_neutron_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: sf_net }
      security_groups: [ { get_resource: sf_ext_secgroup_gerrit_ssh },
                         { get_resource: sf_ext_secgroup_http },
                         { get_resource: sf_ext_secgroup_swarm_slave },
                         { get_resource: sf_int_secgroup_default },
                         ]

  managesf_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      port_id: { get_resource: managesf_neutron_port }
      floating_network_id: { get_param: ext_net_uuid }

  puppetmaster_neutron_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: sf_net }
      security_groups: [ { get_resource: sf_ext_secgroup_admin },
                         { get_resource: sf_int_secgroup_default },
                        ]

  puppetmaster_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      port_id: { get_resource: puppetmaster_neutron_port }
      floating_network_id: { get_param: ext_net_uuid }

  slave_neutron_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: sf_net }
      security_groups: [ { get_resource: sf_int_secgroup_default },
                         ]

  mysql_neutron_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: sf_net }
      security_groups: [ { get_resource: sf_int_secgroup_default },
                         ]

  puppetmaster_volume:
    type: OS::Cinder::Volume
    properties:
      name  : "puppetmaster"
      image : { get_param: puppetmaster_image_id }
      size  : { get_param: puppetmaster_root_size }

  puppetmaster_instance:
    type: OS::Nova::Server
    depends_on: [ managesf_instance, gerrit_instance, jenkins_instance, redmine_instance, mysql_instance, slave_instance ]
    properties:
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : puppetmaster_volume } }]
      flavor: { get_param: puppetmaster_flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: puppetmaster_neutron_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: puppetmaster
            fqdn: puppetmaster.SF_SUFFIX
            disable_root: 0
            write_files:
            - content: |
                hosts:
                  localhost:
                    ip: 127.0.0.1
                  puppetmaster.SF_SUFFIX:
                    ip: puppermaster-ip-template
                    host_aliases: [puppetmaster]
                  mysql.SF_SUFFIX:
                    ip: mysql_host
                    host_aliases: [mysql]
                  jenkins.SF_SUFFIX:
                    ip: jenkins_host
                    host_aliases: [jenkins]
                  slave.SF_SUFFIX:
                    ip: slave_host
                    host_aliases: [slave]
                  redmine.SF_SUFFIX:
                    ip: redmine_host
                    host_aliases: [redmine]
                  api-redmine.SF_SUFFIX:
                    ip: redmine_host
                  gerrit.SF_SUFFIX:
                    ip: gerrit_host
                    host_aliases: [gerrit]
                  managesf.SF_SUFFIX:
                    ip: managesf_host
                    host_aliases: [managesf, auth.SF_SUFFIX, SF_SUFFIX]
              path: /root/hosts.yaml
            - encoding: b64
              content: SFCONFIGCONTENT
              path: /root/sfconfig.yaml
            runcmd:
              - mkdir -p /var/log/edeploy
              - echo "PROFILE=none" >> /var/log/edeploy/vars
              - MY_PRIV_IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4 | cut -d, -f1`
              - sed -i "s/puppermaster-ip-template/$MY_PRIV_IP/" /root/hosts.yaml
              - echo "127.0.0.1 puppetmaster.SF_SUFFIX puppetmaster" > /etc/hosts
              - echo "mysql_host mysql.SF_SUFFIX mysql" >> /etc/hosts
              - echo "jenkins_host jenkins.SF_SUFFIX jenkins" >> /etc/hosts
              - echo "slave_host slave.SF_SUFFIX slave" >> /etc/hosts
              - echo "redmine_host redmine.SF_SUFFIX redmine" >> /etc/hosts
              - echo "gerrit_host gerrit.SF_SUFFIX gerrit" >> /etc/hosts
              - echo "managesf_host managesf.SF_SUFFIX auth.SF_SUFFIX managesf SF_SUFFIX" >> /etc/hosts
              - cd /root/puppet-bootstrapper
              - ./config_puppetmaster.sh > /var/log/sf-bootstrap.log 2>&1
              - HOME=/root/ JUP=JENKINS_USER_PASSWORD TEMP_SSH_PWD=SSHPASS SFSUFFIX=SF_SUFFIX ./bootstrap.sh >> /var/log/sf-bootstrap.log 2>&1
              - echo UseDNS no >> /etc/ssh/sshd_config
              - service ssh reload || service sshd reload
          params:
            jenkins_host: { get_attr: [jenkins_instance, first_address] }
            redmine_host: { get_attr: [redmine_instance, first_address] }
            gerrit_host: { get_attr: [gerrit_instance, first_address] }
            managesf_host: { get_attr: [managesf_instance, first_address] }
            mysql_host: { get_attr: [mysql_instance, first_address] }
            slave_host: { get_attr: [slave_instance, first_address] }
            SF_SUFFIX: { get_param: suffix }
            SFCONFIGCONTENT: { get_param: sf_config_content }
            JENKINS_USER_PASSWORD: { get_param: jenkins_user_pwd }
            SSHPASS: {get_attr: [ssh_password, value]}

  jenkins_volume:
    type: OS::Cinder::Volume
    properties:
      name  : "jenkins"
      image : { get_param: sf_image_id }
      size  : { get_param: jenkins_root_size }

  jenkins_instance:
    type: OS::Nova::Server
    properties:
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : jenkins_volume } }]
      flavor: { get_param: jenkins_flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: jenkins_neutron_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: jenkins
            fqdn: jenkins.SF_SUFFIX
            disable_root: 0
            runcmd:
              - mkdir -p /var/log/edeploy
              - echo "PROFILE=none" >> /var/log/edeploy/vars
              - service puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX puppet puppetmaster >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
              - echo UseDNS no >> /etc/ssh/sshd_config
              - service ssh reload || service sshd reload
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: {get_attr: [ssh_password, value]}

  redmine_volume:
    type: OS::Cinder::Volume
    properties:
      name  : "redmine"
      image : { get_param: sf_image_id }
      size  : { get_param: redmine_root_size }

  redmine_instance:
    type: OS::Nova::Server
    properties:
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : redmine_volume } }]
      flavor: { get_param: redmine_flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: redmine_neutron_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: redmine
            fqdn: redmine.SF_SUFFIX
            disable_root: 0
            runcmd:
              - mkdir -p /var/log/edeploy
              - echo "PROFILE=none" >> /var/log/edeploy/vars
              - service puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX puppet puppetmaster >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
              - echo UseDNS no >> /etc/ssh/sshd_config
              - service ssh reload || service sshd reload
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: {get_attr: [ssh_password, value]}

  gerrit_volume:
    type: OS::Cinder::Volume
    properties:
      name  : "gerrit"
      image : { get_param: sf_image_id }
      size  : { get_param: gerrit_root_size }

  gerrit_instance:
    type: OS::Nova::Server
    properties:
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : gerrit_volume } }]
      flavor: { get_param: gerrit_flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: gerrit_neutron_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: gerrit
            fqdn: gerrit.SF_SUFFIX
            disable_root: 0
            runcmd:
              - mkdir -p /var/log/edeploy
              - echo "PROFILE=none" >> /var/log/edeploy/vars
              - service puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX puppet puppetmaster >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
              - echo UseDNS no >> /etc/ssh/sshd_config
              - service ssh reload || service sshd reload
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: {get_attr: [ssh_password, value]}

  managesf_volume:
    type: OS::Cinder::Volume
    properties:
      name  : "managesf"
      image : { get_param: sf_image_id }
      size  : { get_param: managesf_root_size }

  managesf_instance:
    type: OS::Nova::Server
    properties:
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : managesf_volume } }]
      flavor: { get_param: managesf_flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: managesf_neutron_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: managesf
            fqdn: managesf.SF_SUFFIX
            disable_root: 0
            runcmd:
              - mkdir -p /var/log/edeploy
              - echo "PROFILE=none" >> /var/log/edeploy/vars
              - service puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX puppet puppetmaster >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
              - echo UseDNS no >> /etc/ssh/sshd_config
              - service ssh reload || service sshd reload
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: {get_attr: [ssh_password, value]}

  mysql_volume:
    type: OS::Cinder::Volume
    properties:
      name  : "mysql"
      image : { get_param: sf_image_id }
      size  : { get_param: mysql_root_size }

  mysql_instance:
    type: OS::Nova::Server
    properties:
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : mysql_volume } }]
      flavor: { get_param: mysql_flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: mysql_neutron_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: mysql
            fqdn: mysql.SF_SUFFIX
            disable_root: 0
            runcmd:
              - mkdir -p /var/log/edeploy
              - echo "PROFILE=none" >> /var/log/edeploy/vars
              - service puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX puppet puppetmaster >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
              - echo UseDNS no >> /etc/ssh/sshd_config
              - service ssh reload || service sshd reload
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: {get_attr: [ssh_password, value]}

  slave_volume:
    type: OS::Cinder::Volume
    properties:
      name  : "slave"
      image : { get_param: sf_image_id }
      size  : { get_param: slave_root_size }

  slave_instance:
    type: OS::Nova::Server
    properties:
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : slave_volume } }]
      flavor: { get_param: slave_flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: slave_neutron_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: slave
            fqdn: slave.SF_SUFFIX
            disable_root: 0
            groups:
              - jenkins: [jenkins]
            users:
              - name: jenkins
                primary-group: jenkins
                lock-passwd: false
                plain_text_passwd: JENKINS_USER_PASSWORD
                homedir: /var/lib/jenkins
            write_files:
            - content: |
                Defaults   !requiretty
                jenkins    ALL = NOPASSWD:ALL
              permissions: '0440'
              path: /etc/sudoers.d/jenkins
            - content: |
                [Unit]
                Description=Jenkins Slave Swarm client
                After=network.target

                [Install]
                Alias=swarm

                [Service]
                Type=simple
                User=jenkins
                SyslogIdentifier=swarm
                EnvironmentFile=/etc/sysconfig/swarm
                ExecStart=/usr/bin/java $JVMARGS -jar /var/lib/jenkins/swarm-client-latest.jar -fsroot /var/lib/jenkins -master $MASTER -username $USERNAME -password $PASSWORD -name $NAME
              permissions: '0640'
              path: /lib/systemd/system/swarm.service
            - content: |
                MASTER=http://SF_SUFFIX:8080/jenkins/
                USERNAME=jenkins
                PASSWORD=JENKINS_USER_PASSWORD
                NAME=slave.SF_SUFFIX
                JVMARGS=-Xmx256m
              permissions: '0640'
              path: /etc/sysconfig/swarm
            runcmd:
             - mkdir -p /var/log/edeploy
             - echo "PROFILE=none" >> /var/log/edeploy/vars
             - echo "127.0.1.1 slave.SF_SUFFIX slave" >> /etc/hosts
             - echo "MANAGESF_IP managesf.SF_SUFFIX SF_SUFFIX" >> /etc/hosts
             - echo "root:SSHPASS" | chpasswd
             - chown -R jenkins /var/lib/jenkins
             - echo UseDNS no >> /etc/ssh/sshd_config
             - service ssh reload || service sshd reload
             - systemctl enable swarm.service
             - systemctl start swarm.service
          params:
            SF_SUFFIX: { get_param: suffix }
            JENKINS_USER_PASSWORD: { get_param: jenkins_user_pwd }
            MANAGESF_IP: { get_attr: [managesf_instance, first_address] }


outputs:
  managesf_public_address:
    description: Public address of managesf
    value:
      str_replace:
        template: "Public address of the managesf instance: host"
        params:
          host: { get_attr: [managesf_floating_ip, floating_ip_address] }
  puppetmaster_public_address:
    description: Public address of Puppetmaster
    value:
      str_replace:
        template: "Public address of the Puppetmaster instance: host"
        params:
          host: { get_attr: [puppetmaster_floating_ip, floating_ip_address] }

