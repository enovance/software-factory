#!/bin/bash
#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -x
set -e

[ "$1" = "upgrade" ] && upgrade=true || upgrade=false

gerrit_host=<%= scope.function_hiera(["gerrit_host"]) %>
gerrit_ssh_port=<%= @gerrit['gerrit_sshd_port'] %>
gh="$gerrit_host:$gerrit_ssh_port"

gateway_host="<%= scope.function_hiera(["gateway_host"]) %>"
gateway_url="<%= scope.function_hiera(["gateway_url"]) %>"

admin="<%= @gerrit['gerrit_admin_username'] %>"
admin_http_password="<%= @gerrit['gerrit_admin_password'] %>"
auth=$admin:$admin_http_password

admin_email="<%= @gerrit['gerrit_admin_mail'] %>"

gerrit_ssh_key="/root/gerrit_admin_rsa"
jenkins_kick_script="/usr/local/jenkins/slave_scripts/kick.sh"

if [ "$upgrade" = "false" ]; then
    # Create config project (managesf must be up)
    if [ ! -f '/usr/share/config.init.done' ]; then
        sfmanager --url $gateway_url --auth $auth create --name config --description "Config repository (Do not delete it)"
        sfmanager --url $gateway_url --auth $auth replication_config add --section mysql_config projects config
        sfmanager --url $gateway_url --auth $auth replication_config add --section mysql_config url gerrit@$gateway_host:/home/gerrit/site_path/git/\${name}.git
        sfmanager --url $gateway_url --auth $auth replication_config add --section mysql_config push +refs/heads/*:refs/heads/*
        sfmanager --url $gateway_url --auth $auth replication_config add --section mysql_config push +refs/tags/*:refs/tags/*
        sfmanager --url $gateway_url --auth $auth trigger_replication --project config || true
        touch /usr/share/config.init.done
    fi
fi

# Clone the config project
echo "ssh -o StrictHostKeyChecking=no -i $gerrit_ssh_key \$@" > /root/ssh_wrapper.sh
chmod +x /root/ssh_wrapper.sh
export GIT_SSH="/root/ssh_wrapper.sh"
export GIT_COMMITTER_NAME=$admin
export GIT_COMMITTER_EMAIL=$admin_email
CONF_TMP=$(mktemp -d)
git clone ssh://$admin@$gh/config ${CONF_TMP}

if [ "$upgrade" = "false" ]; then
    if [ -d "${CONF_TMP}/jobs" ]; then
        echo "Config repository already initialised"
        rm -rf ${CONF_TMP}
        exit 0
    fi

    # Add JJB files to the config repo
    mkdir ${CONF_TMP}/jobs
    cp -Rv /usr/share/sf-jjb/* ${CONF_TMP}/jobs

    # Add Zuul files to the config repo
    mkdir ${CONF_TMP}/zuul
    cp -Rv /usr/share/sf-zuul/* ${CONF_TMP}/zuul

    # Add Nodepool files to the config repo
    mkdir ${CONF_TMP}/nodepool
    cp -Rv /usr/share/sf-nodepool/* ${CONF_TMP}/nodepool

    # Commit the changes
    cd ${CONF_TMP}
    git add .
    git commit -a --author "$admin <$admin_email>" -m "JJB/Zuul files"
    git push origin master
fi

if [ "$upgrade" = "true" ]; then
    cp -v /usr/share/sf-jjb/sf_jjb_conf.yaml ${CONF_TMP}/jobs
    cp -v /usr/share/sf-zuul/layout.yaml ${CONF_TMP}/zuul
    cp -v /usr/share/sf-nodepool/base.sh ${CONF_TMP}/nodepool
    cd ${CONF_TMP}
    git config --add gitreview.username "$admin"
    # Only perform the commit/review if the upgrade bring new modifications
    if [ -n "$(git ls-files -o -m --exclude-standard)" ]; then
        git commit -a --author "$admin <$admin_email>" -m "Upgrade of base JJB/Zuul files"
        (eval $(ssh-agent) && ssh-add $gerrit_ssh_key && git review -s)
        git review -i
    fi
    cd -

fi
rm -rf ${CONF_TMP}
