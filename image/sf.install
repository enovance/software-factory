#!/bin/sh

# STEP2 only extra-packages (to avoid cache rebuild)
STAGING_PKGS=""
STAGING_PIP=""

function install_sf {
    set -e
    test -n "${CAUTH_CLONED_PATH}"
    test -n "${MANAGESF_CLONED_PATH}"
    test -n "${PYSFLIB_CLONED_PATH}"
    test -n "${SFMANAGER_CLONED_PATH}"

    mkdir -p ${dir}/usr/src

    cp -f /etc/resolv.conf "${dir}/etc/"

    if [ ! -z "${STAGING_PKGS}" ]; then
        install_packages ${dir} ${STAGING_PKGS}
    fi
    if [ ! -z "${STAGING_PIP}" ]; then
        retry do_chroot ${dir} pip install 'pip<8' ${STAGING_PIP}
    fi

    # Make sure subproject are available
    if [ ! -d "${CAUTH_CLONED_PATH}" ] || [ ! -d "${MANAGESF_CLONED_PATH}" ] || \
        [ ! -d "${PYSFLIB_CLONED_PATH}" ] || [ ! -d "${SFMANAGER_CLONED_PATH}" ]; then
        echo "Can't find subprojects in $(dirname ${CAUTH_CLONED_PATH})"
        echo "Run ./image/fetch_subprojects.sh first"
        exit -1
    fi

    # Make sure final image use latest ids.tables
    cp ./C7.0-ids.tables ${dir}/etc/ids.tables

    # Disable postfix and remove configuration to reduce puppet noise
    # Disable postfix and remove configuration
    do_chroot ${dir} systemctl disable postfix
    for i in main.cf virtual; do
        echo -n > ${dir}/etc/postfix/$i
    done

    # Install ansible playbooks and configuration files
    do_chroot ${dir} mkdir -p /etc/software-factory
    sudo rsync --delete -a --no-owner ./../serverspec/ ${dir}/etc/serverspec/

    # Sf-config
    sudo rsync -a --no-owner ./../config/scripts/ ${dir}/usr/local/bin/
    sudo rsync --delete -a -L --no-owner ./../config/defaults/ ${dir}/etc/software-factory/
    sudo rsync --delete -a -L --no-owner ./../config/defaults/ ${dir}/usr/local/share/sf-default-config/
    sudo rsync --delete -a --no-owner ./../config/ansible/ ${dir}/etc/ansible/
    sudo mkdir -p ${dir}/etc/software-factory ${dir}/etc/ansible/group_vars ${dir}/var/lib/ansible
    sudo rsync --delete -a --no-owner ./../health-check/ ${dir}/etc/ansible/health-check/

    sudo cp -Rv ./../config/config-repo/ ${dir}/usr/local/share/sf-config-repo
    sudo cp -Rv ./../tools/slaves/ ${dir}/usr/local/share/sf-jenkins-slave-tools
    # Also copy tool in image PATH so that sf image could
    # be used as slave base image
    sudo cp -Rv ./../tools/slaves/* ${dir}/usr/local/bin/

    # Install cauth
    sudo rsync -a --delete ${CAUTH_CLONED_PATH}/ ${dir}/usr/src/cauth/
    do_chroot ${dir} bash -c "cd /usr/src/cauth; /var/www/cauth/bin/python setup.py install"

    # Install managesf
    sudo rsync -a --delete ${MANAGESF_CLONED_PATH}/ ${dir}/usr/src/managesf/
    do_chroot ${dir} bash -c "cd /usr/src/managesf; /var/www/managesf/bin/python setup.py install"

    # Install python-sfmanager
    sudo rsync -a --delete ${SFMANAGER_CLONED_PATH}/ ${dir}/usr/src/python-sfmanager/
    do_chroot ${dir} bash -c "cd /usr/src/python-sfmanager; /srv/sfmanager/bin/python setup.py install --install-scripts /usr/bin"

    # Install pysflib
    sudo rsync -a --delete ${PYSFLIB_CLONED_PATH}/ ${dir}/usr/src/pysflib/
    do_chroot ${dir} bash -c "cd /usr/src/pysflib; /var/www/cauth/bin/python setup.py install"
    do_chroot ${dir} bash -c "cd /usr/src/pysflib; /var/www/managesf/bin/python setup.py install"
    do_chroot ${dir} bash -c "cd /usr/src/pysflib; /srv/sfmanager/bin/python setup.py install"


    do_chroot ${dir} find /root /var/www /srv/ -name "*.pyc" -exec rm {} \;

    # Documentation
    DOCBUILDDIR=$(mktemp -d /tmp/sfdocs_buildXXXXXXX)
    rm -Rf ${dir}/var/www/docs
    mkdir ${dir}/var/www/docs
    cd ${DOCDIR} && make BUILDDIR=$DOCBUILDDIR CAUTH_CLONED_PATH=${CAUTH_CLONED_PATH} SFMANAGER_CLONED_PATH=${SFMANAGER_CLONED_PATH} html ; cd -
    mv $DOCBUILDDIR/html/* ${dir}/var/www/docs/
    rm -rf $DOCBUILDDIR

    # Fix localhost crt
    cat > ${dir}/tmp/openssl.cnf << EOF
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name

[ req_distinguished_name ]
commonName_default = localhost

[ v3_req ]
subjectAltName=@alt_names

[alt_names]
DNS.1 = localhost
EOF

    do_chroot ${dir} openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -subj "/C=FR/O=SoftwareFactory/CN=localhost" -keyout /etc/pki/tls/private/localhost.key -out /etc/ssl/certs/localhost.crt -extensions v3_req -config /tmp/openssl.cnf

    rm -f ${dir}/tmp/openssl.cnf

    # Deactivate default disabling of root ssh access of cloud-init
    sed -i 's/disable_root:.*/disable_root: 0/' ${dir}/etc/cloud/cloud.cfg

    # Set a default password. This is needed when image is booted when metadata servers
    # are not available. Cloudinit will deactivate root auth by password.
    do_chroot ${dir} bash -c "passwd -d root"
    # Be sure sshd disallow authentication by password (only allowed by key)
    sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' ${dir}/etc/ssh/sshd_config
}
