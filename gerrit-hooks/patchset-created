#!/usr/bin/env python
#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# This hook will update a Redmine issue by:
# - changing its status to in-progess
# - add an issue note with the review URL

# https://gerrit-documentation.storage.googleapis.com/\
#        Documentation/2.8.1/config-hooks.html

# Gerrit will call the hook with the following options:
# patchset-created --change <change id>
#                  --is-draft <boolean>
#                  --change-url <change url>
#                  --project <project name>
#                  --branch <branch>
#                  --topic <topic>
#                  --uploader <uploader>
#                  --commit <sha1>
#                  --patchset <patchset id>

import os
import sys

from pysflib.hooks import sfgerrit as hooks


arguments = ('change', 'is-draft', 'change-url', 'project', 'branch',
             'topic', 'uploader', 'commit', 'patchset', 'kind',
             'change-owner', 'newrev')

# Look for the config in the Gerrit hooks directory
HOOKS_CONFIG = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'hooks.config')

MESSAGE = """Fix proposed on Gerrit to branch: %(branch)s
Review: %(url)s
"""


class PatchsetCreatedHook(hooks.GerritHook):
    def __init__(self):
        super(PatchsetCreatedHook, self).__init__(arguments,
                                                  file(HOOKS_CONFIG))
        self.status_closing = 2
        self.status_related = 2
        self.msg = MESSAGE

    def main(self, args):
        if args.patchset == '1':
            return super(PatchsetCreatedHook, self).main(args)
        else:
            hooks.logger.debug("Do nothing as the patchset is not the first")
            return 0

if __name__ == "__main__":
    if not os.path.isfile(HOOKS_CONFIG):
        hooks.logger.error("Unable to find hooks config !")
        sys.exit(0)

    created_hook = PatchsetCreatedHook()
    args = created_hook.get_parser().parse_args()
    hooks.logger.debug("Patchset created with %r" % args)
    try:
        e = created_hook.main(args)
        sys.exit(e)
    except Exception as e:
        hooks.logger.error(e)
        sys.exit(1)
