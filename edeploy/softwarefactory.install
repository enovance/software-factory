#!/bin/bash
#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

src="$1"
dir="$2"
version="$3"
ROLE=softwarefactory
ORIG=$(cd $(dirname $0); pwd)

. ${ORIG}/third_party_tools
. ${ORIG}/functions

BUNDLE_RETRIES=3

DOCDIR="../docs"
GERRITHOOKS="../gerrit-hooks"

retry $EDEPLOY_ROLES_PATH/jenkins.install ${dir} ${dir} $version
# The role Jenkins does not deactivate the jenkins service at startup
# https://github.com/enovance/edeploy-roles/issues/80
do_chroot ${dir} bash -c "for x in {0..6}; do ls /etc/rc\${x}.d/*jenkins | xargs rm -f ; done"

# Install the most recent version of PIP at early stage
retry do_chroot ${dir} pip install -U pip

case "$(package_tool)" in
  "yum")
     # The puppetlas-release package install repo desc for puppet in yum
     install_packages ${dir} ${PUPPET_REPO_URL}
     add_epel_repository $DIST

     install_packages ${dir} "puppet monit postfix git vim-enhanced nodejs httpd java-1.6.0-openjdk mariadb-server python-werkzeug python-babel python-jinja2 MySQL-python socat mod_wsgi m2crypto mariadb gitweb debootstrap unzip pigz ntp openssl mod_ssl"
     DEVEL_PKGS="openldap-devel zlib-devel libcurl-devel openssl-devel httpd-devel apr-devel apr-util-devel mariadb-devel gcc-c++ ruby-devel ImageMagick-devel gcc cpp python-devel libxml2-devel libxslt-devel"

     install_packages ${dir} ${DEVEL_PKGS}

     # Install SQLAlchemy for paste lodegit (not available in yum)
     # TODO(mhu) manage mirror choice with pip
     retry do_chroot ${dir} pip install SQLAlchemy
     install_bup ${dir}
     # Install mod authpub tkt for apache (SSO)
     http_fetch $MOD_AUTH_PUBTKT_URL ${dir}/tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}.tar.gz
     do_chroot ${dir} bash -c "cd /tmp && tar -xvzf mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}.tar.gz"
     do_chroot ${dir} bash -c "cd /tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION} && ./configure --apxs=/usr/bin/apxs && make && make install"
     do_chroot ${dir} rm -Rf /tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}
     # Install Passenger for Redmine
     mkdir -p ${dir}/var/www/html
     mkdir -p ${dir}/var/log/httpd
     HOME=/root do_chroot ${dir} gem install passenger --version ${PASSENGER_VERSION}
     HOME=/root do_chroot ${dir} gem install bundler
     HOME=/root do_chroot ${dir} passenger-install-apache2-module -a
     do_chroot ${dir} bash -c "ln -s \$(find /usr/local/share/gems/gems/passenger-${PASSENGER_VERSION} -maxdepth 0) /usr/lib/passenger"
     # Install Redmine
     http_fetch $REDMINE_RHEL_URL ${dir}/usr/share/redmine.tar.gz
     do_chroot ${dir} bash -c "cd /usr/share && tar -xzpf redmine.tar.gz && mv redmine-${REDMINE_VERSION} redmine && chown -R root:root redmine"

     # We install this fake database file in order to force the bundle to activate the mysql2 lib
     # Redmine puppet manifest will overwrite it
     cat > ${dir}/usr/share/redmine/config/database.yml <<EOF
production:
  adapter: mysql2
  database: redmine
  host: localhost
  username: root
  password: ""
  encoding: utf8
EOF
     HOME=/root do_chroot ${dir} bash -c "cd /usr/share/redmine && bundle install --retry $BUNDLE_RETRIES"
     retry do_chroot ${dir} pip install python-dateutil
     ;;
  *)
     fatal_error "$package_tool isn't supported for $ROLE role"
     ;;
esac

# Gerrit
mkdir ${dir}/root/gerrit_data_source/
http_fetch $GERRIT_URL ${dir}/root/gerrit_data_source/gerrit.war
http_fetch $MYSQLJAVA_URL ${dir}/root/gerrit_data_source/mysql-connector-java.jar
http_fetch $BCPROVJAVA_URL ${dir}/root/gerrit_data_source/bcprov.jar
http_fetch $BCPKIXJAVA_URL ${dir}/root/gerrit_data_source/bcpkix.jar
cp -Rf $GERRITHOOKS ${dir}/root/gerrit_data_source/

# Install Redmine backlog plugin
do_chroot ${dir} mkdir -p /usr/share/redmine/plugins
retry do_chroot ${dir} git clone $REDMINE_BACKLOG_URL /usr/share/redmine/plugins/redmine_backlogs --depth 1
# An update of holidays gem 10/12/2014 to 1.0.7 leads to unable to deploy the backlog plugin
# Check later if we can safely remove that :
cd ${dir}/usr/share/redmine/plugins/redmine_backlogs
sed -i 's/gem \"holidays\", \"~>1.0.3\"/gem \"holidays\", \"=1.0.6\"/' Gemfile
cd -
HOME=/root do_chroot ${dir} bash -c "cd /usr/share/redmine/plugins/redmine_backlogs && bundle install --retry $BUNDLE_RETRIES"
HOME=/root do_chroot ${dir} bash -c 'cd /usr/share/redmine && bundle update'

# Install Redmine http plugin
retry do_chroot ${dir} git clone $REDMINE_HTTP_PLUGIN_URL /usr/share/redmine/plugins/redmine_http_auth --depth 1

# Twitter Bootstrap - http://getbootstrap.com/
http_fetch $BOOTSTRAP_URL ${dir}/tmp/bootstrap.zip
do_chroot ${dir} unzip -q -o /tmp/bootstrap.zip -d /var/www/static/
do_chroot ${dir} mv /var/www/static/bootstrap-${BOOTSTRAP_VERSION}-dist /var/www/static/bootstrap
do_chroot ${dir} rm /tmp/bootstrap.zip

# Font Awesome - http://fortawesome.github.io/Font-Awesome/
http_fetch $FONTAWESOME_URL ${dir}/tmp/font-awesome.zip
do_chroot ${dir} unzip -q -o /tmp/font-awesome.zip -d /var/www/static/
do_chroot ${dir} mv /var/www/static/Font-Awesome-${FONTAWESOME_VERSION} /var/www/static/font-awesome
do_chroot ${dir} rm /tmp/font-awesome.zip

do_chroot ${dir} mkdir /var/www/static/js
# JQuery - http://jquery.com/
http_fetch $JQUERY_URL ${dir}/var/www/static/js/jquery.min.js
# AngularJS
http_fetch $ANGULARJS_URL ${dir}/var/www/static/js/angular.min.js

# zuul
retry do_chroot ${dir} git clone ${ZUUL_URL} /srv/zuul
do_chroot ${dir} bash -c "cd /srv/zuul && git checkout -b working ${ZUUL_VERSION}"
# Install dependencies first
retry do_chroot ${dir} pip install -U setuptools
retry do_chroot ${dir} pip install docutils
retry do_chroot ${dir} bash -c "cd /srv/zuul && pip install -U -r requirements.txt"
retry do_chroot ${dir} pip install APScheduler==${APSCHEDULER_VERSION}
retry do_chroot ${dir} pip install GitPython==${GITPYTHON_VERSION}
do_chroot ${dir} bash -c "cd /srv/zuul && python /srv/zuul/setup.py install"
do_chroot ${dir} ln -s /var/www/static/bootstrap /srv/zuul/etc/status/public_html/bootstrap
http_fetch $JQUERY_VISIBILITY_URL ${dir}/srv/zuul/etc/status/public_html/jquery-visibility.min.js
http_fetch $JQUERY_GRAPHITE_URL ${dir}/srv/zuul/etc/status/public_html/jquery.graphite.js
do_chroot ${dir} cp /var/www/static/js/jquery.min.js /srv/zuul/etc/status/public_html/jquery.min.js

# Etherpad_lite
http_fetch $ETHERPAD_LITE_URL ${dir}/tmp/etherpad_lite.tar.gz
http_fetch $NODEJS_NPM ${dir}/tmp/npm-install.sh
## Try to avoid the failure in jenkins
do_chroot ${dir} sed -i "s#</dev/tty##" /tmp/npm-install.sh
[ ! -d "${dir}/var/www/etherpad-lite" ] && mkdir -p ${dir}/var/www/etherpad-lite
do_chroot ${dir} tar -xzf /tmp/etherpad_lite.tar.gz --strip-components=1 -C /var/www/etherpad-lite
# /bin/installDeps.sh is looking for /usr/bin/node
[ ! -e "${dir}/usr/bin/node" ] && do_chroot ${dir} ln -s /usr/bin/nodejs /usr/bin/node
# Node or npm seems to deals with SUDO_UID and SUDO_GID that for results set new created
# files as user id/gid referenced by sudo. So force id/gid to 0 (root)
SUDO_UID=0 SUDO_GID=0 HOME=/root npm_install=$NPM_INSTALL do_chroot ${dir} sh /tmp/npm-install.sh
## Use a mirror
do_chroot ${dir} sed -i "s|npm install|npm --registry ${NPM_MIRROR_URL} install|" /var/www/etherpad-lite/bin/installDeps.sh
SUDO_UID=0 SUDO_GID=0 HOME=/root retry do_chroot ${dir} sh /var/www/etherpad-lite/bin/installDeps.sh

# Include topmenu in Etherpad
cat << EOF | patch ${dir}/var/www/etherpad-lite/src/templates/index.html
38a39
>         <script type="text/javascript" src="/static/js/topmenu.js"></script>
53d53
<               border-top: 8px solid rgba(51,51,51,.8);
EOF

cat << EOF | patch ${dir}/var/www/etherpad-lite/src/templates/pad.html
50a51
>         <script type="text/javascript" src="/static/js/topmenu.js"></script>
EOF

# Paste (Lodgeit)
do_chroot ${dir} mkdir -p /srv/lodgeit
retry do_chroot ${dir} git clone ${PASTE_URL} /srv/lodgeit/lodgeit --depth 1
do_chroot ${dir} bash -c "cd /srv/lodgeit/lodgeit && git checkout ${PASTE_VERSION}"

# Replace absolute URLs beginning with /static/
do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/layout.html
do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/help/advanced.html
do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/help/pasting.html

# Include topmenu in Paste
cat << EOF | patch ${dir}/srv/lodgeit/lodgeit/lodgeit/views/layout.html
11a12
>     <script type="text/javascript" src="/static/js/topmenu.js"></script>
EOF

# install pysflib
[ ! -d "${dir}/var/www" ] && mkdir ${dir}/var/www
retry do_chroot ${dir} git clone ${PYSFLIB_REPO} /var/www/pysflib
retry do_chroot ${dir} bash -c "cd /var/www/pysflib && git checkout ${PYSFLIB_VERSION}"
retry do_chroot ${dir} bash -c "cd /var/www/pysflib && pip install -r requirements.txt"
do_chroot ${dir} bash -c "cd /var/www/pysflib && python setup.py install"

# Cauth server
[ ! -d "${dir}/var/www" ] && mkdir ${dir}/var/www
retry do_chroot ${dir} git clone ${CAUTH_REPO} /var/www/cauth
retry do_chroot ${dir} bash -c "cd /var/www/cauth && git checkout ${CAUTH_VERSION}"
retry do_chroot ${dir} bash -c "cd /var/www/cauth && pip install -r requirements.txt"

# Managesf
[ ! -d "${dir}/var/www" ] && mkdir ${dir}/var/www
cp -r ../tools/managesf ${dir}/var/www/managesf
retry do_chroot ${dir} bash -c "cd /var/www/managesf && pip install -r requirements.txt"

# JJB need pbr > 0.8
retry do_chroot ${dir} pip install -U pbr==${PBR_VERSION}

# Documentation
DOCBUILDDIR=/tmp/_build
[ ! -d "${dir}/var/www/docs" ] && mkdir ${dir}/var/www/docs
cd ${DOCDIR} && make BUILDDIR=$DOCBUILDDIR html ; cd -
cp -r $DOCBUILDDIR/html/* ${dir}/var/www/docs/
rm -rf $DOCBUILDDIR

# Jenkins Swarm client
retry do_chroot ${dir} pip install nose flake8
swarm_client=$(basename $JENKINS_SWARM_CLIENT_URL)
http_fetch $JENKINS_SWARM_CLIENT_URL ${dir}/var/lib/jenkins/${swarm_client}
ln -sf ${swarm_client} ${dir}/var/lib/jenkins/swarm-client-latest.jar

# Jenkins Swarm plugin
mkdir -p ${dir}/var/lib/jenkins/plugins
http_fetch $JENKINS_SWARM_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_SWARM_PLUGIN_URL)

# Jenkins theme plugin
http_fetch $JENKINS_THEME_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_THEME_PLUGIN_URL)


# install git-review for internal use
retry do_chroot ${dir} pip install git-review

mkdir -p ${dir}/usr/local/jenkins/slave_scripts/
cp ../puppet/modules/jjb/files/gerrit-git-prep.sh ${dir}/usr/local/jenkins/slave_scripts/
chmod +x ${dir}/usr/local/jenkins/slave_scripts/gerrit-git-prep.sh

# Cleanup
clear_packages_cache ${dir}
# somehow yum left some packages behind...
rm -f ${dir}/var/cache/yum/*/packages/*.rpm
rm -f ${dir}/var/cache/yum/*/*.sqlite
# When roles are built by jenkins user (the case in our gate)
# some hidden directories are stored in /var/lib/jenkins (Jenkins home)
rm -Rf ${dir}/var/lib/jenkins/.[!.]*

# Remove development packages, they are no longer needed
remove_packages ${dir} ${DEVEL_PKGS}

# Disable root passwd
do_chroot ${dir} passwd -l root

disable_selinux

put_git_mark ${dir}

# EOF
