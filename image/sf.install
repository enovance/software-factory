#!/bin/sh

# STEP2 only extra-packages (to avoid cache rebuild)
STAGING_PKGS=""

# Zuul requirement
STAGING_PIP="${STAGING_PIP}
argparse
Paste
ordereddict
"

# Nodepool requirement
STAGING_PIP="${STAGING_PIP}
pbr>=0.6,!=0.7,<1.0
python-daemon>=2.0.4
extras
statsd>=1.0.0,<3.0
apscheduler>=2.1.1,<3.0
sqlalchemy>=0.8.2,<0.9.0
pyzmq>=13.1.0,<14.0.0
PrettyTable>=0.6,<0.8
six>=1.7.0
"

function install_nodepool {
    # nodepool
    if [ ! -f ${dir}/usr/bin/nodepool ]; then
        [ -d ${dir}/srv/nodepool ] || retry do_chroot ${dir} git clone ${NODEPOOL_URL} /srv/nodepool
        do_chroot ${dir} bash -c "cd /srv/nodepool && git checkout -b working ${NODEPOOL_VERSION}"
        do_chroot ${dir} bash -c "cd /srv/nodepool && python setup.py install"
        rm -Rf ${dir}/srv/nodepool
    fi
}

function install_zuul {
    # zuul
    if [ ! -f ${dir}/usr/bin/zuul ]; then
        [ -d ${dir}/srv/zuul ] || retry do_chroot ${dir} git clone ${ZUUL_URL} /srv/zuul
        do_chroot ${dir} bash -c "cd /srv/zuul && git checkout -b working ${ZUUL_VERSION}"
        # Install dependencies first
        do_chroot ${dir} bash -c "cd /srv/zuul && python setup.py install"
        mv ${dir}/srv/zuul/etc/status/public_html/ ${dir}/var/www/zuul
        rm -Rf ${dir}/srv/zuul
    fi
    [ -h ${dir}/var/www/zuul/bootstrap ] || ln -s /var/www/static/bootstrap ${dir}/var/www/zuul/bootstrap
    http_fetch $JQUERY_VISIBILITY_URL ${dir}/var/www/zuul/jquery-visibility.min.js
    http_fetch $JQUERY_GRAPHITE_URL ${dir}/var/www/zuul/jquery.graphite.js
}

function install_sf {
    set -e
    test -n "${CAUTH_CLONED_PATH}"
    test -n "${MANAGESF_CLONED_PATH}"
    test -n "${PYSFLIB_CLONED_PATH}"
    test -n "${SFMANAGER_CLONED_PATH}"

    cp -f /etc/resolv.conf "${dir}/etc/"

    if [ ! -z "${STAGING_PKGS}" ]; then
        install_packages ${dir} "${STATING_PKGS}"
        check_rpm_packages ${dir} "${STAGING_PKGS}"
    fi
    if [ ! -z "${STAGING_PIP}" ]; then
        retry do_chroot ${dir} pip install ${STAGING_PIP}
        check_pip_packages ${dir} "${STAGING_PIP}"
    fi

    # Make sure subproject are available
    if [ ! -d "${CAUTH_CLONED_PATH}" ] || [ ! -d "${MANAGESF_CLONED_PATH}" ] || \
        [ ! -d "${PYSFLIB_CLONED_PATH}" ] || [ ! -d "${SFMANAGER_CLONED_PATH}" ]; then
        echo "Can't find subprojects in $(dirname ${CAUTH_CLONED_PATH})"
        echo "Run ./image/fetch_subprojects.sh first"
        exit -1
    fi

    # Install zuul && nodepool
    install_nodepool
    install_zuul

    # Disable postfix and remove configuration to reduce puppet noise
    do_chroot ${dir} systemctl disable postfix
    for i in main.cf virtual; do
        echo -n > ${dir}/etc/postfix/$i
    done

    # Install puppet files for SF
    do_chroot ${dir} mkdir -p /etc/puppet/environments/sf
    do_chroot ${dir} mkdir -p /etc/puppet/hiera/sf
    sudo cp -Rv ./../puppet/manifests ${dir}/etc/puppet/environments/sf
    sudo cp -Rv ./../puppet/modules ${dir}/etc/puppet/environments/sf
    sudo cp -Rv ./../puppet/hiera/* ${dir}/etc/puppet/hiera/sf
    sudo cp -Rv ./../puppet/hiera.yaml ${dir}/etc/puppet/
    sudo cp -Rv ./../serverspec/ ${dir}/etc/serverspec/

    # Sf-config
    sudo cp -Rv ./../config/scripts/* ${dir}/usr/local/bin/
    sudo cp -Rv ./../config/defaults/* ${dir}/etc/puppet/hiera/sf/
    sudo cp -Rv ./../config/ansible/ ${dir}/usr/local/share/sf-ansible
    sudo cp -Rv ./../config/config-repo/ ${dir}/usr/local/share/sf-config-repo

    # Install cauth
    [ ! -d "${dir}/var/www/cauth" ] && sudo mkdir ${dir}/var/www/cauth
    sudo cp -Rv ${CAUTH_CLONED_PATH}/* ${dir}/var/www/cauth/
    do_chroot ${dir} bash -c "cd /var/www/cauth && python setup.py install"

    # Install pysflib
    sudo mkdir -p ${dir}/tmp/pysflib
    sudo cp -Rv ${PYSFLIB_CLONED_PATH}/* ${dir}/tmp/pysflib/
    do_chroot ${dir} bash -c "cd /tmp/pysflib; python setup.py install"

    # Install managesf
    [ ! -d "${dir}/var/www/managesf" ] && sudo mkdir ${dir}/var/www/managesf
    sudo cp -Rv ${MANAGESF_CLONED_PATH}/* ${dir}/var/www/managesf/
    do_chroot ${dir} bash -c "cd /var/www/managesf; python setup.py install"

    # Install python-sfmanager
    sudo mkdir -p ${dir}/tmp/python-sfmanager
    sudo cp -Rv ${SFMANAGER_CLONED_PATH}/* ${dir}/tmp/python-sfmanager/
    do_chroot ${dir} bash -c "cd /tmp/python-sfmanager; python setup.py install"

    do_chroot ${dir} find /root /var/www -name "*.pyc" -exec rm {} \;

    # Documentation
    DOCBUILDDIR=$(mktemp -d /tmp/sfdocs_buildXXXXXXX)
    [ ! -d "${dir}/var/www/docs" ] && mkdir ${dir}/var/www/docs
    cd ${DOCDIR} && make BUILDDIR=$DOCBUILDDIR CAUTH_CLONED_PATH=${CAUTH_CLONED_PATH} SFMANAGER_CLONED_PATH=${dir}/tmp/python-sfmanager html ; cd -
    mv $DOCBUILDDIR/html/* ${dir}/var/www/docs/
    rm -rf $DOCBUILDDIR

    # Fix localhost crt
    cat > ${dir}/tmp/openssl.cnf << EOF
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name

[ req_distinguished_name ]
commonName_default = localhost

[ v3_req ]
subjectAltName=@alt_names

[alt_names]
DNS.1 = localhost
EOF

    do_chroot ${dir} openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -subj "/C=FR/O=SoftwareFactory/CN=localhost" -keyout /etc/pki/tls/private/localhost.key -out /etc/ssl/certs/localhost.crt -extensions v3_req -config /tmp/openssl.cnf

    rm -f ${dir}/tmp/openssl.cnf

    # Deactivate default disabling of root ssh access of cloud-init
    sed -i 's/disable_root:.*/disable_root: 0/' ${dir}/etc/cloud/cloud.cfg

    # Set a default password. This is needed when image is booted when metadata servers
    # are not available. Cloudinit will deactivate root auth by password.
    do_chroot ${dir} bash -c "passwd -d root"
    # Be sure sshd disallow authentication by password (only allowed by key)
    sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' ${dir}/etc/ssh/sshd_config
}
