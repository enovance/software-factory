From d17706cfb568b5d5f16a8f8cc4b35e70fff0646a Mon Sep 17 00:00:00 2001
From: Tristan Cacqueray <tristan.cacqueray@enovance.com>
Date: Sun, 15 Feb 2015 18:38:28 +0000
Subject: [PATCH] Add support for layout configuration split

This implements the zuul_split spec:
* Allows to use a directory instead of a single file
* Recurse this directory to grab all relevant yaml files
* Yaml dictionaries are additively merged
* Merge conflicts are detected through the layoutvalidator

Change-Id: Ia8e0f121298cb2c99210e163986a7be33124f09b
---

diff --git a/tests/fixtures/layouts/bad_split-conflict.yaml.d/template1.yaml b/tests/fixtures/layouts/bad_split-conflict.yaml.d/template1.yaml
new file mode 100644
index 0000000..753038b
--- /dev/null
+++ b/tests/fixtures/layouts/bad_split-conflict.yaml.d/template1.yaml
@@ -0,0 +1,14 @@
+pipelines:
+  - name: 'check'
+    manager: IndependentPipelineManager
+
+project-templates:
+  - name: template-generic
+    check:
+     - '{project}-merge'
+
+projects:
+  - name: organization/project
+    template:
+      - name: template-generic
+        project: 'myproject'
diff --git a/tests/fixtures/layouts/bad_split-conflict.yaml.d/template2.yaml b/tests/fixtures/layouts/bad_split-conflict.yaml.d/template2.yaml
new file mode 100644
index 0000000..c647318
--- /dev/null
+++ b/tests/fixtures/layouts/bad_split-conflict.yaml.d/template2.yaml
@@ -0,0 +1,5 @@
+# This template is already defined and will fail validation
+project-templates:
+  - name: template-generic
+    check:
+     - '{project}-merge'
diff --git a/tests/fixtures/layouts/bad_split.yaml.d/layout1.yaml b/tests/fixtures/layouts/bad_split.yaml.d/layout1.yaml
new file mode 100644
index 0000000..1e92a60
--- /dev/null
+++ b/tests/fixtures/layouts/bad_split.yaml.d/layout1.yaml
@@ -0,0 +1,2 @@
+# Empty list will fail the merge
+pipelines:
diff --git a/tests/fixtures/layouts/bad_split.yaml.d/layout2.yaml b/tests/fixtures/layouts/bad_split.yaml.d/layout2.yaml
new file mode 100644
index 0000000..2bee402
--- /dev/null
+++ b/tests/fixtures/layouts/bad_split.yaml.d/layout2.yaml
@@ -0,0 +1,12 @@
+pipelines:
+  - name: check
+    manager: IndependentPipelineManager
+    trigger:
+      gerrit:
+        - event: patchset-created
+    success:
+      gerrit:
+        verified: 1
+    failure:
+      gerrit:
+        verified: -1
diff --git a/tests/fixtures/layouts/good_split.yaml.d/layout.yaml b/tests/fixtures/layouts/good_split.yaml.d/layout.yaml
new file mode 100644
index 0000000..cd41395
--- /dev/null
+++ b/tests/fixtures/layouts/good_split.yaml.d/layout.yaml
@@ -0,0 +1,56 @@
+pipelines:
+  - name: check
+    manager: IndependentPipelineManager
+    require:
+      open: True
+      current-patchset: True
+    trigger:
+      review_gerrit:
+        - event: patchset-created
+        - event: comment-added
+          require-approval:
+            - verified: [-1, -2]
+              username: jenkins
+          approval:
+            - workflow: 1
+    success:
+      review_gerrit:
+        verified: 1
+    failure:
+      review_gerrit:
+        verified: -1
+
+  - name: gate
+    manager: DependentPipelineManager
+    success-message: Your change is awesome.
+    failure-message: Build failed.  For information on how to proceed, see http://wiki.example.org/Test_Failures
+    require:
+      open: True
+      current-patchset: True
+      approval:
+        - verified: [1, 2]
+          username: jenkins
+        - workflow: 1
+    reject:
+      approval:
+        - code-review: [-1, -2]
+    trigger:
+      review_gerrit:
+        - event: comment-added
+          approval:
+            - approved: 1
+    start:
+      review_gerrit:
+        verified: 0
+    success:
+      review_gerrit:
+        verified: 2
+        code-review: 1
+        submit: true
+    failure:
+      review_gerrit:
+        verified: -2
+        workinprogress: true
+
+jobs:
+  - name: test-thing
diff --git a/tests/fixtures/layouts/good_split.yaml.d/project_a/layout.yaml b/tests/fixtures/layouts/good_split.yaml.d/project_a/layout.yaml
new file mode 100644
index 0000000..6f005ef
--- /dev/null
+++ b/tests/fixtures/layouts/good_split.yaml.d/project_a/layout.yaml
@@ -0,0 +1,16 @@
+includes:
+  - python-file: projecta_functions.py
+
+jobs:
+  - name: post-projecta
+
+projects:
+  - name: test-org/projecta
+    merge-mode: cherry-pick
+    check:
+      - test-thing
+    gate:
+      - test-thing
+    post:
+      - post-projecta
+
diff --git a/tests/fixtures/layouts/good_split.yaml.d/project_b/layout.yaml b/tests/fixtures/layouts/good_split.yaml.d/project_b/layout.yaml
new file mode 100644
index 0000000..a1e0433
--- /dev/null
+++ b/tests/fixtures/layouts/good_split.yaml.d/project_b/layout.yaml
@@ -0,0 +1,20 @@
+includes:
+  - python-file: projectb_functions.py
+
+pipelines:
+  - name: post
+    manager: IndependentPipelineManager
+    trigger:
+      review_gerrit:
+        - event: ref-updated
+          ref: ^(?!refs/).*$
+          ignore-deletes: True
+
+
+projects:
+  - name: test-org/projectb
+    merge-mode: cherry-pick
+    check:
+      - test-thing
+    gate:
+      - test-thing
diff --git a/tests/test_layoutvalidator.py b/tests/test_layoutvalidator.py
index 3dc3234..63911eb 100644
--- a/tests/test_layoutvalidator.py
+++ b/tests/test_layoutvalidator.py
@@ -20,14 +20,13 @@
 
 import testtools
 import voluptuous
-import yaml
 
 import zuul.layoutvalidator
 import zuul.lib.connections
 
 FIXTURE_DIR = os.path.join(os.path.dirname(__file__),
                            'fixtures')
-LAYOUT_RE = re.compile(r'^(good|bad)_.*\.yaml$')
+LAYOUT_RE = re.compile(r'^(good|bad)_.*\.(yaml|yaml.d)$')
 
 
 class TestLayoutValidator(testtools.TestCase):
@@ -35,7 +34,9 @@
         """Test layout file validation"""
         print
         errors = []
-        for fn in os.listdir(os.path.join(FIXTURE_DIR, 'layouts')):
+        files_list = os.listdir(os.path.join(FIXTURE_DIR, 'layouts'))
+        files_list.sort()
+        for fn in files_list:
             m = LAYOUT_RE.match(fn)
             if not m:
                 continue
@@ -53,10 +54,10 @@
             connections = zuul.lib.connections.configure_connections(config)
 
             layout = os.path.join(FIXTURE_DIR, 'layouts', fn)
-            data = yaml.load(open(layout))
             validator = zuul.layoutvalidator.LayoutValidator()
             if m.group(1) == 'good':
                 try:
+                    data = zuul.layoutvalidator.loadConfig(layout)
                     validator.validate(data, connections)
                 except voluptuous.Invalid as e:
                     raise Exception(
@@ -64,6 +65,7 @@
                         (fn, str(e)))
             else:
                 try:
+                    data = zuul.layoutvalidator.loadConfig(layout)
                     validator.validate(data, connections)
                     raise Exception("Expected a YAML syntax error in %s." %
                                     fn)
@@ -71,8 +73,26 @@
                     error = str(e)
                     print '  ', error
                     if error in errors:
+                        print "Error already in ", layout
                         raise Exception("Error has already been tested: %s" %
                                         error)
                     else:
                         errors.append(error)
                     pass
+
+    def test_loadConfig(self):
+        """Test config parser for split tests"""
+        print
+        good_fn = os.path.join(FIXTURE_DIR, 'layouts',
+                               'good_split.yaml.d')
+        print good_fn
+        data = zuul.layoutvalidator.loadConfig(good_fn)
+        self.assertIsNotNone(filter(lambda x: x['name'] == 'test-org/projecta',
+                                    data['projects']))
+        self.assertIsNotNone(filter(lambda x: x['name'] == 'post',
+                                    data['pipelines']))
+
+        bad_fn = os.path.join(FIXTURE_DIR, 'layouts',
+                              'unknown_file')
+        print bad_fn
+        self.assertRaises(Exception, zuul.layoutvalidator.loadConfig, bad_fn)
diff --git a/zuul/cmd/server.py b/zuul/cmd/server.py
index 2aca4f2..45a5c53 100755
--- a/zuul/cmd/server.py
+++ b/zuul/cmd/server.py
@@ -45,7 +45,7 @@
         parser.add_argument('-c', dest='config',
                             help='specify the config file')
         parser.add_argument('-l', dest='layout',
-                            help='specify the layout file')
+                            help='specify the layout file or directory')
         parser.add_argument('-d', dest='nodaemon', action='store_true',
                             help='do not run as a daemon')
         parser.add_argument('-t', dest='validate', nargs='?', const=True,
diff --git a/zuul/layoutvalidator.py b/zuul/layoutvalidator.py
index a01eed3..6379cca 100644
--- a/zuul/layoutvalidator.py
+++ b/zuul/layoutvalidator.py
@@ -16,7 +16,9 @@
 # under the License.
 
 import voluptuous as v
+import os
 import string
+import yaml
 
 
 # Several forms accept either a single item or a list, this makes
@@ -25,6 +27,42 @@
     return v.Any([x], x)
 
 
+def loadConfig(config_path):
+    """Load layout configuration whenever it is a single file or a directory.
+       If it's a directory, this will walk through each .yaml file and performs
+       a simple yaml merge"""
+    config_path = os.path.expanduser(config_path)
+    if not os.path.exists(config_path):
+        raise Exception("Unable to read layout config path at %s" %
+                        config_path)
+
+    # Discover all files in config_path
+    paths = []
+    if os.path.isdir(config_path):
+        for root, dirs, files in os.walk(config_path, topdown=True):
+            paths.extend([os.path.join(root, path) for path in files])
+    else:
+        paths.append(config_path)
+
+    # Keeps only .yaml files
+    paths = filter(lambda x: x.endswith('.yaml'), paths)
+
+    final_data = {}
+    for path in paths:
+        data = yaml.load(open(path))
+        # Merge document
+        for key in data:
+            if key in final_data:
+                try:
+                    final_data[key] += data[key]
+                except:
+                    raise v.Invalid("Could not merge '%s' from %s" %
+                                    (key, path))
+            else:
+                final_data[key] = data[key]
+    return final_data
+
+
 class LayoutSchema(object):
     include = {'python-file': str}
     includes = [include]
diff --git a/zuul/scheduler.py b/zuul/scheduler.py
index e1aa0c2..968ed33 100644
--- a/zuul/scheduler.py
+++ b/zuul/scheduler.py
@@ -25,7 +25,6 @@
 import sys
 import threading
 import time
-import yaml
 
 import layoutvalidator
 import model
@@ -389,13 +388,7 @@
         layout = model.Layout()
         project_templates = {}
 
-        if config_path:
-            config_path = os.path.expanduser(config_path)
-            if not os.path.exists(config_path):
-                raise Exception("Unable to read layout config file at %s" %
-                                config_path)
-        with open(config_path) as config_file:
-            data = yaml.load(config_file)
+        data = layoutvalidator.loadConfig(config_path)
 
         validator = layoutvalidator.LayoutValidator()
         validator.validate(data, connections)
