#!/bin/sh

function install_sf {
    set -e
    test -n "${CAUTH_CLONED_PATH}"
    test -n "${MANAGESF_CLONED_PATH}"
    test -n "${PYSFLIB_CLONED_PATH}"

    cp -f /etc/resolv.conf "${dir}/etc/"

    # Make sure subproject are available
    if [ ! -d "${CAUTH_CLONED_PATH}" ] || [ ! -d "${MANAGESF_CLONED_PATH}" ] || [ ! -d "${PYSFLIB_CLONED_PATH}" ]; then
        echo "Can't find subprojects in $(dirname ${CAUTH_CLONED_PATH})"
        echo "Run ./image/fetch_subprojects.sh first"
        exit -1
    fi

    # Disable postfix and remove configuration to reduce puppet noise
    do_chroot ${dir} systemctl disable postfix
    for i in main.cf virtual; do
        echo -n > ${dir}/etc/postfix/$i
    done

    # Install puppet files for SF
    do_chroot ${dir} mkdir -p /etc/puppet/environments/sf
    do_chroot ${dir} mkdir -p /etc/puppet/hiera/sf
    sudo cp -Rv ./../puppet/manifests ${dir}/etc/puppet/environments/sf
    sudo cp -Rv ./../puppet/modules ${dir}/etc/puppet/environments/sf
    sudo cp -Rv ./../puppet/hiera/* ${dir}/etc/puppet/hiera/sf
    sudo cp -Rv ./../puppet/hiera.yaml ${dir}/etc/puppet/
    sudo cp -Rv ./../serverspec/ ${dir}/etc/serverspec/

    # Sf-config
    sudo cp -Rv ./../config/scripts/* ${dir}/usr/local/bin/
    sudo cp -Rv ./../config/defaults/* ${dir}/etc/puppet/hiera/sf/

    # Install cauth
    [ ! -d "${dir}/var/www/cauth" ] && sudo mkdir ${dir}/var/www/cauth
    sudo cp -Rv ${CAUTH_CLONED_PATH}/* ${dir}/var/www/cauth/
    # override pysflib version from requirements
    do_chroot ${dir} sed -i '/pysflib/d' /var/www/cauth/requirements.txt
    do_chroot ${dir} bash -c "cd /var/www/cauth && SWIG_FEATURES='-cpperraswarn -includeall -I/usr/include/openssl' pip install -r requirements.txt"
    do_chroot ${dir} bash -c "cd /var/www/cauth && python setup.py install"

    # Install pysflib
    sudo mkdir -p ${dir}/tmp/pysflib
    sudo cp -Rv ${PYSFLIB_CLONED_PATH}/* ${dir}/tmp/pysflib/
    do_chroot ${dir} bash -c "cd /tmp/pysflib; pip install -r requirements.txt"
    do_chroot ${dir} bash -c "cd /tmp/pysflib/src/pygerrit/; python setup.py install"
    do_chroot ${dir} bash -c "cd /tmp/pysflib; python setup.py install"

    # Install managesf
    [ ! -d "${dir}/var/www/managesf" ] && sudo mkdir ${dir}/var/www/managesf
    sudo cp -Rv ${MANAGESF_CLONED_PATH}/* ${dir}/var/www/managesf/
    # override pysflib version from requirements
    do_chroot ${dir} sed -i '/pysflib/d' /var/www/managesf/requirements.txt
    do_chroot ${dir} bash -c "cd /var/www/managesf; pip install -r requirements.txt"
    do_chroot ${dir} bash -c "cd /var/www/managesf; python setup.py install"

    do_chroot ${dir} find /root /var/www -name "*.pyc" -exec rm {} \;

    # Install Gerrit hooks
    cp -Rf $GERRITHOOKS ${dir}/root/gerrit_data_source/

    # Documentation
    DOCBUILDDIR=$(mktemp -d /tmp/sfdocs_buildXXXXXXX)
    [ ! -d "${dir}/var/www/docs" ] && mkdir ${dir}/var/www/docs
    cd ${DOCDIR} && make BUILDDIR=$DOCBUILDDIR CAUTH_CLONED_PATH=${CAUTH_CLONED_PATH} MANAGESF_CLONED_PATH=${dir}/var/www/managesf html ; cd -
    mv $DOCBUILDDIR/html/* ${dir}/var/www/docs/
    rm -rf $DOCBUILDDIR

    # Fix localhost crt
    cat > ${dir}/tmp/openssl.cnf << EOF
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name

[ req_distinguished_name ]
commonName_default = localhost

[ v3_req ]
subjectAltName=@alt_names

[alt_names]
DNS.1 = localhost
EOF

    do_chroot ${dir} openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -subj "/C=FR/O=SoftwareFactory/CN=localhost" -keyout /etc/pki/tls/private/localhost.key -out /etc/ssl/certs/localhost.crt -extensions v3_req -config /tmp/openssl.cnf

    rm -f ${dir}/tmp/openssl.cnf

    # Deactivate default disabling of root ssh access of cloud-init
    sed -i 's/disable_root:.*/disable_root: 0/' ${dir}/etc/cloud/cloud.cfg
    
    # Set a default password. This is needed when image is booted when metadata servers
    # are not available. Cloudinit will deactivate root auth by password.
    do_chroot ${dir} bash -c "passwd -d root"
    # Be sure sshd disallow authentication by password (only allowed by key)
    sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' ${dir}/etc/ssh/sshd_config
}
