#!/bin/bash
#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -e

[ -z "$DEBUG" ] || set -x
# Target dir where the centos images will be built
dir="$1"
# Version is SF_VER
version="$2"

dist="centos"
CODENAME_MAJOR=7
ROLE=softwarefactory
export LC_ALL=C
export HOME=/root
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

ORIG=$(cd $(dirname $0); pwd)

if [ -z "$ORIG" ]; then
    echo "ORIG env variable must be set to the top dir of the sources" 1>&2
    exit 1
fi

if [ -z "$dir" ]; then
    echo "dir env variable must be set to the top dir of your destination directory" 1>&2
    exit 1
fi

. ${ORIG}/third_party_tools
. ${ORIG}/functions

bootstrap() {
    local target=$dir

    mount_fs

    local release_rpm_url=$(add_main_repository)

    if [ ! -f "${target}/etc/redhat-release" ]; then
        rpm --initdb --root="$target"
        rpm -ivh --root "$target" $release_rpm_url
    fi

    sed -i 's/$releasever/7/g' ${target}/etc/yum.repos.d/*

    if [ ! -z "${http_proxy}" ]; then
        echo "Using proxies ${http_proxy} and ${https_proxy}" 1>&2
        # Do not use a mirror; these might change between builds and thus a lot
        # of requests are not missed at the cache
        sed -i 's/^#baseurl/baseurl/g' ${target}/etc/yum.repos.d/*
        sed -i 's/^mirrorlist/#mirrorlist/g' ${target}/etc/yum.repos.d/*
        grep -q "^proxy=" ${target}/etc/yum.conf || echo -e "[main]\nproxy=" >> ${target}/etc/yum.conf
        sed -i "s#^proxy=.*#proxy=${http_proxy}#" ${target}/etc/yum.conf
    fi

    cp -f /etc/resolv.conf "$target/etc/"

    if [ ! -f "${target}/usr/bin/yum" ]; then
        rpm --root="$target" --import $(ls $target/etc/pki/rpm-gpg/RPM-GPG-KEY-* | fgrep -v Debug)
        # We cannot use install_packages since the basesystem isn't yet setup
        yum --disableplugin=* --installroot $target install -y basesystem yum shadow-utils
        checkpoint "first bootstrap"
    elif [ -f "${target}/usr/bin/yum-complete-transaction" ]; then
        do_chroot ${dir} yum-complete-transaction --cleanup-only
        do_chroot ${dir} yum update -y
    fi

    if [ -f  "$target"/root/.rpmdb/Packages ]; then
        mv -f "$target"/root/.rpmdb/*  "$target"/root/.rpmdb/.??* "$target"/var/lib/rpm/
        rmdir "$target"/root/.rpmdb
    fi
    cp -p ${ORIG}/edeploy/* ${target}/usr/sbin/
    cp ${ORIG}/C7.0-ids.tables ${dir}/etc/ids.tables
    fake_shadow_utils

    [ -d "$target/var/lib/edeploy/${version}" ] || mkdir -p "$target/var/lib/edeploy/${version}"

    rebuild_db $target

    cp ${target}/etc/skel/.bashrc ${target}/root
    cp ${target}/etc/skel/.bash_profile ${target}/root

    mkdir -p ${target}/usr/share/edeploy

    echo  'LANG=en_US.UTF-8' > ${target}/etc/locale.conf

    cat > ${target}/etc/sysconfig/network <<EOF
NETWORKING=yes
NOZEROCONF=yes
EOF
    chmod 0644 ${target}/etc/sysconfig/network

    # Adds sane default sysctl
    cat > ${target}/etc/sysctl.conf <<EOF
net.ipv4.ip_forward = 1
net.ipv4.ip_dynaddr = 0
net.ipv4.tcp_ecn = 0
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.icmp_echo_ignore_broadcasts = 1
kernel.sysrq = 0
EOF
    chmod 0400 ${target}/etc/sysctl.conf

    # Add caching repo for various rpms
    cat > ${target}/etc/yum.repos.d/sf.repo <<EOF
[sf]
name=SF repository for various packages
baseurl=http://46.231.133.241:8080/v1/AUTH_sf/rpms
gpgcheck=0
enabled=1
EOF

}

enable_selinux() {
    # Force SELinux relabel
    touch ${dir}/.autorelabel

    # TODO: replace "permissive" by "enforcing" once there are no more avc message
    sed -i "s/^SELINUX=.*/SELINUX=permissive/" "${dir}/etc/selinux/config"
}

install_elk() {
    # Make sure nginx is disabled by default
    do_chroot ${dir} systemctl disable nginx
}

install_sf_packages() {
    install_packages ${dir} $CENTOS_PKGS $BUILD_PKGS $SF_PKGS

    # Make sure auditd is enabled by default
    do_chroot ${dir} systemctl enable auditd
    checkpoint "centos rpms installed"

    [ -f "${dir}/etc/yum.repos.d/epel.repo" ] || install_packages ${dir} epel-release
    [ -f "${dir}/etc/yum.repos.d/rdo-release.repo" ] || install_packages ${dir} ${RDO_REPO}
    install_packages ${dir} ${EPEL_PKGS} ${RDO_PKGS}
    checkpoint "epel+rdo rpms installed"

    if [ ! -f "${dir}/usr/lib64/httpd/modules/mod_passenger.so" ]; then
        http_fetch ${PASSENGER_REPO} ${dir}/etc/yum.repos.d/passenger.repo
        install_packages ${dir} ${PASSENGER_PKGS}
        rm -f ${dir}/etc/yum.repos.d/passenger.repo
        checkpoint "passenger installed"
    fi

    retry do_chroot ${dir} pip install --upgrade 'pip<8'
    retry do_chroot ${dir} pip install ${PIP_PKGS}
    checkpoint "pip packages installed"

    # JJB directory
    mkdir -p ${dir}/etc/jenkins_jobs

    # install zuul_swift_upload.py
    http_fetch $ZUUL_SWIFT_UPLOAD_URL ${dir}/usr/local/bin/zuul_swift_upload.py
    chmod +x ${dir}/usr/local/bin/zuul_swift_upload.py

    # don't rename net ifaces
    net_rules="${target}/etc/udev/rules.d/80-net-name-slot.rules"
    if [ "$(readlink ${net_rules} 2> /dev/null)" != "/dev/null" ]; then
        rm -f ${net_rules}
        ln -s /dev/null ${net_rules}
    fi

    [ -d ${dir}/var/lib/grafana ] || install_packages ${dir} ${GRAFANA_URL}

    # tune ssh conf
    grep -q "^UseDNS no" ${target}/etc/ssh/sshd_config || echo UseDNS no >> ${target}/etc/ssh/sshd_config
    grep -q "^UseRoaming no" ${target}/etc/ssh/ssh_config || echo UseRoaming no >> ${target}/etc/ssh/ssh_config
}

function install_jenkins {
    [ -d ${dir}/var/lib/jenkins/plugins ] || mkdir -p ${dir}/var/lib/jenkins/plugins
    do_chroot $dir chown jenkins /var/lib/jenkins /var/lib/jenkins/plugins

    # Jenkins Swarm client
    swarm_client=$(basename $JENKINS_SWARM_CLIENT_URL)
    http_fetch $JENKINS_SWARM_CLIENT_URL ${dir}/var/lib/jenkins/${swarm_client}
    rm -f ${dir}/var/lib/jenkins/swarm-client-latest.jar
    ln -sf ${swarm_client} ${dir}/var/lib/jenkins/swarm-client-latest.jar

    # Jenkins ssh-agent plugin
    http_fetch $JENKINS_SSH_AGENT_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_SSH_AGENT_PLUGIN_URL)
    # Jenkins Gearman plugin
    http_fetch $JENKINS_GEARMAN_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_GEARMAN_PLUGIN_URL)

    # Jenkins Swarm plugin
    http_fetch $JENKINS_SWARM_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_SWARM_PLUGIN_URL)

    # Jenkins theme plugin
    http_fetch $JENKINS_THEME_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_THEME_PLUGIN_URL)

    # Jenkins credentials plugin
    http_fetch $JENKINS_CREDENTIALS_BINDING_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_CREDENTIALS_BINDING_URL)
    http_fetch $JENKINS_WORKFLOW_STEP_API_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_WORKFLOW_STEP_API_URL)
    http_fetch $JENKINS_PLAIN_CREDENTIALS_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_PLAIN_CREDENTIALS_URL)
    http_fetch $JENKINS_REVERSE_AUTH_PROXY_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_REVERSE_AUTH_PROXY_PLUGIN_URL)

    # Jenkins plugin to run scripts as publishers
    http_fetch $JENKINS_POST_BUILDSCRIPT_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_POST_BUILDSCRIPT_PLUGIN_URL)

    # Jenkins ZMQ event plugin
    http_fetch $JENKINS_ZMQ_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_ZMQ_PLUGIN_URL)

    # Jenkins Dashboard plugin
    http_fetch $JENKINS_DASHBOARD_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_DASHBOARD_PLUGIN_URL)

    # Jenkins Cobertura code coverage plugin
    http_fetch $JENKINS_COBERTURA_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_COBERTURA_URL)

    # Jenkins AnsiColor plugin
    http_fetch $JENKINS_ANSI_COLOR_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_ANSI_COLOR_PLUGIN_URL)

    # make sure jenkins is disabled by default
    rm -Rf ${dir}/etc/rc.d/*/*jenkins*
}

function install_gerrit {
    # Gerrit
    [ -d "${dir}/root/gerrit_data_source/" ] || mkdir ${dir}/root/gerrit_data_source/
    http_fetch $GERRIT_URL ${dir}/root/gerrit_data_source/gerrit.war
    http_fetch $MYSQLJAVA_URL ${dir}/root/gerrit_data_source/mysql-connector-java.jar
    http_fetch $BCPROVJAVA_URL ${dir}/root/gerrit_data_source/bcprov.jar
    http_fetch $BCPKIXJAVA_URL ${dir}/root/gerrit_data_source/bcpkix.jar
}

function install_pygerrit {
    # Pygerrit
    if [ ! -d "${dir}/usr/lib/python2.7/site-packages/pygerrit" ]; then
        retry do_chroot ${dir} git clone https://github.com/morucci/pygerrit.git /srv/pygerrit
        do_chroot ${dir} bash -c 'cd /srv/pygerrit && python setup.py install'
        rm -Rf ${dir}/srv/pygerrit
    fi
}

function install_redmine {
    # Disable gem rdoc installation
    echo gem: --no-rdoc --no-ri > ${dir}/root/.gemrc

    # Ensure basic directories
    [ -d ${dir}/var/www/html ] || mkdir -p ${dir}/var/www/html
    [ -d ${dir}/var/log/httpd ] || mkdir -p ${dir}/var/log/httpd

    # Install Redmine
    if [ -d ${dir}/var/www/redmine ]; then
        head ${dir}/var/www/redmine/doc/CHANGELOG | grep "${REDMINE_VERSION}$" || {
            rm -Rf ${dir}/var/www/redmine
            checkpoint "Removed outdated redmine version..."
        }
    fi

    # Remove old install directory
    rm -Rf ${dir}/usr/share/redmine

    # Install Redmine
    if [ ! -d ${dir}/var/www/redmine ]; then
        http_fetch $REDMINE_RHEL_URL ${dir}/var/www/redmine.tar.gz
        do_chroot ${dir} tar -xzpf /var/www/redmine.tar.gz -C /var/www
        cat > ${dir}/var/www/redmine-${REDMINE_VERSION}/config/database.yml <<EOF
production:
  adapter: mysql2
  database: redmine
  host: localhost
  username: root
  password: ""
  encoding: utf8
EOF
        SUDO_UID=0 SUDO_GID=0 do_chroot ${dir} bash -c "cd /var/www/redmine-${REDMINE_VERSION} && bundle install --without development test"
        mv ${dir}/var/www/redmine-${REDMINE_VERSION} ${dir}/var/www/redmine
        rm ${dir}/var/www/redmine.tar.gz
    fi

    # Install Redmine backlog plugin
    [ -d ${dir}/var/www/redmine/plugins ] || mkdir -p ${dir}/var/www/redmine/plugins
    if [ ! -d ${dir}/var/www/redmine/plugins/redmine_backlogs ]; then
        retry do_chroot ${dir} git clone --depth 1 -b ${REDMINE_BACKLOG_VERSION} $REDMINE_BACKLOG_URL /var/www/redmine/plugins/redmine_backlogs
        SUDO_UID=0 SUDO_GID=0 do_chroot ${dir} bash -c "cd /var/www/redmine/plugins/redmine_backlogs && bundle install --without development test"
    fi

    # Install Redmine http plugin
    if [ ! -d ${dir}/var/www/redmine/plugins/redmine_http_auth ]; then
        retry do_chroot ${dir} git clone $REDMINE_HTTP_PLUGIN_URL /var/www/redmine/plugins/redmine_http_auth
        do_chroot ${dir} bash -c "cd /var/www/redmine/plugins/redmine_http_auth; git checkout -b sf_pinned ${REDMINE_HTTP_PLUGIN_VERSION}"
    fi

    # Update bundle; remove mysql2 gem because it might need to be rebuilt
    # against newer mariadb server
    SUDO_UID=0 SUDO_GID=0 do_chroot ${dir} bash -c "cd /var/www/redmine/ && gem uninstall mysql2 && bundle update"

    # Set files permissions (according to: http://www.redmine.org/projects/redmine/wiki/redmineinstall )
    mkdir -p ${dir}/var/www/redmine/{tmp,tmp/pdf,public/plugin_assets}
    do_chroot ${dir} chown -R apache:apache /var/www/redmine/{files,log,tmp,public/plugin_assets}
    do_chroot ${dir} chmod -R 755 /var/www/redmine/{files,log,tmp,public/plugin_assets}
}

install_edeploy() {
    cat > ${dir}/etc/rsyncd.conf << EOF
uid = root
gid = root

[install]
        path = /var/lib/debootstrap/install
        comment = eDeploy install trees

[metadata]
        path = /var/lib/debootstrap/metadata
        comment = eDeploy metadata
EOF

    cat > ${dir}/var/lib/edeploy/conf << EOF
VERS=${version}
ROLE=softwarefactory
RSERV_PORT=873
RSERV=managesf
EOF
}

install_murmurd() {
    if [ ! -d ${dir}/usr/local/murmur ]; then
        http_fetch $MURMUR_URL ${dir}/tmp/murmur.tar.bz2
        tar -xjf ${dir}/tmp/murmur.tar.bz2 -C ${dir}/tmp/
        mv ${dir}/tmp/murmur-static_x86-${MURMUR_VERSION} ${dir}/usr/local/murmur
    fi
    cat << EOF > ${dir}/lib/systemd/system/murmurd.service
[Unit]
Description=Mumble Server (Murmur)
Requires=network-online.target
After=network-online.target mariadb.service time-sync.target

[Service]
User=murmur
Type=simple
ExecStart=/usr/local/murmur/murmur.x86 -ini /etc/murmur.ini -fg

[Install]
WantedBy=multi-user.target
EOF
}

function install_bup {
    if [ ! -d ${dir}/opt/bup ]; then
        do_chroot ${dir} mkdir -p /opt/bup
        do_chroot ${dir} git clone --depth 1 ${BUP_URL} /opt/bup/
        do_chroot ${dir} bash -c 'cd /opt/bup && git checkout ${BUP_VERSION}'
        do_chroot ${dir} bash -c 'cd /opt/bup && ./configure && make && make install'
    fi
    rm -Rf ${dir}/opt/bup/{t,.git,Documentation}/
}

install_serverspec() {
    retry do_chroot ${dir} gem install serverspec -v ${SERVERSPEC_VERSION}
}

function install_mod_authpub_tkt {
    # Install mod authpub tkt for apache (SSO)
    if [ ! -f ${dir}/usr/lib64/httpd/modules/mod_auth_pubtkt.so ]; then
        http_fetch $MOD_AUTH_PUBTKT_URL ${dir}/tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}.tar.gz
        do_chroot ${dir} bash -c "cd /tmp && tar -xvzf mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}.tar.gz"
        do_chroot ${dir} bash -c "cd /tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION} && unset DEBUG && ./configure --apxs=/usr/bin/apxs && make && make install"
        do_chroot ${dir} rm -Rf /tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}
    fi
}

function install_fonts {
    # Twitter Bootstrap - http://getbootstrap.com/
    if [ ! -d ${dir}/var/www/static/bootstrap ]; then
        http_fetch $BOOTSTRAP_URL ${dir}/tmp/bootstrap.zip
        do_chroot ${dir} unzip -q -o /tmp/bootstrap.zip -d /var/www/static/
        do_chroot ${dir} mv /var/www/static/bootstrap-${BOOTSTRAP_VERSION}-dist /var/www/static/bootstrap
        do_chroot ${dir} rm /tmp/bootstrap.zip
    fi

    # Font Awesome - http://fortawesome.github.io/Font-Awesome/
    if [ ! -d ${dir}/var/www/static/font-awesome ]; then
        http_fetch $FONTAWESOME_URL ${dir}/tmp/font-awesome.zip
        do_chroot ${dir} unzip -q -o /tmp/font-awesome.zip -d /var/www/static/
        do_chroot ${dir} mv /var/www/static/Font-Awesome-${FONTAWESOME_VERSION} /var/www/static/font-awesome
        do_chroot ${dir} rm /tmp/font-awesome.zip
    fi

    [ -d ${dir}/var/www/static/js ] || do_chroot ${dir} mkdir /var/www/static/js
    # JQuery - http://jquery.com/
    http_fetch $JQUERY_URL ${dir}/var/www/static/js/jquery.min.js
    # AngularJS
    http_fetch $ANGULARJS_URL ${dir}/var/www/static/js/angular.min.js
}

function install_etherpad {
    # Etherpad_lite
    if [ ! -d "${dir}/var/www/etherpad-lite" ]; then
        http_fetch $ETHERPAD_LITE_URL ${dir}/tmp/etherpad_lite.tar.gz
        mkdir -p ${dir}/var/www/etherpad-lite
        do_chroot ${dir} tar -xzf /tmp/etherpad_lite.tar.gz --strip-components=1 -C /var/www/etherpad-lite
        # /bin/installDeps.sh is looking for /usr/bin/node
        [ ! -e "${dir}/usr/bin/node" ] && do_chroot ${dir} ln -s /usr/bin/nodejs /usr/bin/node
        SUDO_UID=0 SUDO_GID=0 retry do_chroot ${dir} sh /var/www/etherpad-lite/bin/installDeps.sh
        # Include topmenu in Etherpad
        cat << EOF | patch ${dir}/var/www/etherpad-lite/src/templates/index.html
38a39
>         <script type="text/javascript" src="/static/js/topmenu.js"></script>
53d53
<               border-top: 8px solid rgba(51,51,51,.8);
EOF
        cat << EOF | patch ${dir}/var/www/etherpad-lite/src/templates/pad.html
50a51
>         <script type="text/javascript" src="/static/js/topmenu.js"></script>
EOF
    fi
}

function install_paste {
    # Paste (Lodgeit)
    if [ ! -d "${dir}/srv/lodgeit" ]; then
        do_chroot ${dir} mkdir -p /srv/lodgeit
        retry do_chroot ${dir} git clone ${PASTE_URL} /srv/lodgeit/lodgeit
        do_chroot ${dir} bash -c "cd /srv/lodgeit/lodgeit && git checkout ${PASTE_VERSION}"
        do_chroot ${dir} chown -R apache:apache /srv/lodgeit

        # Replace absolute URLs beginning with /static/
        do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/layout.html
        do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/help/advanced.html
        do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/help/pasting.html
        # Include topmenu in Paste
        cat << EOF | patch ${dir}/srv/lodgeit/lodgeit/lodgeit/views/layout.html
11a12
>     <script type="text/javascript" src="/static/js/topmenu.js"></script>
EOF
    fi
    rm -Rf ${dir}/srv/lodgeit/lodgeit/.git
}

function install_nodepool {
    # Checkout VERSION in /tmp
    do_chroot ${dir} virtualenv /srv/nodepool
    [ -d ${dir}/tmp/nodepool ] || retry do_chroot ${dir} git clone ${NODEPOOL_URL} /tmp/nodepool
    do_chroot ${dir} bash -c "cd /tmp/nodepool && git checkout -b sf_stable ${NODEPOOL_VERSION}"

    # Apply not-merged fixes
    for patch in ./patches/nodepool_*; do
        do_chroot ${dir} bash -c "cd /tmp/nodepool; patch -p1" < ${patch}
    done

    # Install
    do_chroot ${dir} sed -i "s/^apscheduler>=3.0/apscheduler>=3.0,<3.1/" /tmp/nodepool/requirements.txt
    # TODO: remove paramiko version cap
    do_chroot ${dir} sed -i "s/^paramiko.*/paramiko<2.0.0/" /tmp/nodepool/requirements.txt

    do_chroot ${dir} /srv/nodepool/bin/pip install --upgrade 'pbr>=1.3' 'pip<8'
    do_chroot ${dir} /srv/nodepool/bin/pip install 'pip<8' 'funcsigs' file:///tmp/nodepool

    # Install symlink to venv to set correct python path
    for bin in nodepool nodepoold; do
        ln -sf /srv/nodepool/bin/${bin} ${dir}/usr/bin/${bin}
    done

    # Cleanup left-overs
    rm -Rf ${dir}/tmp/nodepool*
}

function install_zuul {
    # Checkout VERSION in /tmp
    do_chroot ${dir} virtualenv /srv/zuul

    # Cleanup left-overs
    rm -Rf ${dir}/tmp/zuul*

    retry do_chroot ${dir} git clone ${ZUUL_URL} /tmp/zuul
    do_chroot ${dir} bash -c "cd /tmp/zuul && git checkout -b working ${ZUUL_VERSION}"

    # Apply temp_url_key fix
    # Apply not-merged fixes
    for patch in ./patches/zuul_*; do
        do_chroot ${dir} bash -c "cd /tmp/zuul; patch -p1" < ${patch}
    done

    # Install
    do_chroot ${dir} sed -i "s/^apscheduler>=3.0/apscheduler>=3.0,<3.1/" /tmp/zuul/requirements.txt
    sudo sed -i 's/^pbr.*//' ${dir}/tmp/zuul/requirements.txt
    # TODO: remove paramiko version cap
    sudo sed -i 's/^paramiko.*/paramiko<2.0.0/' ${dir}/tmp/zuul/requirements.txt

    do_chroot ${dir} /srv/zuul/bin/pip install --upgrade 'pbr' 'pip<8'
    do_chroot ${dir} /srv/zuul/bin/pip install 'pip<8' file:///tmp/zuul

    # Manually install swift and keystone client
    do_chroot ${dir} /srv/zuul/bin/pip install --upgrade 'pbr>=1.8' 'pip<8'
    do_chroot ${dir} /srv/zuul/bin/pip install 'pip<8' python-swiftclient python-keystoneclient

    # Install symlink to venv to set correct python path
    for bin in zuul zuul-cloner zuul-merger zuul-server; do
        ln -sf /srv/zuul/bin/${bin} ${dir}/usr/bin/${bin}
    done

    # Install zuul web virtualhost
    rm -Rf ${dir}/var/www/zuul
    mv ${dir}/tmp/zuul/etc/status/public_html/ ${dir}/var/www/zuul
    mkdir -p ${dir}/var/www/static/js
    http_fetch $JQUERY_VISIBILITY_URL ${dir}/var/www/static/js/jquery-visibility.min.js
    http_fetch $JQUERY_GRAPHITE_URL   ${dir}/var/www/static/js/jquery.graphite.js

    # Cleanup left-overs
    rm -Rf ${dir}/tmp/zuul*
}

function install_gerritbot {
    # Checkout VERSION in /tmp
    rm -Rf ${dir}/tmp/gerritbot

    retry do_chroot ${dir} git clone --depth 1 ${GERRITBOT_URL} /tmp/gerritbot
    do_chroot ${dir} bash -c "cd /tmp/gerritbot && git checkout -b working ${GERRITBOT_VERSION}"

    # Install
    do_chroot ${dir} bash -c "cd /tmp/gerritbot && python setup.py install"

    # Cleanup left-overs
    rm -Rf ${dir}/tmp/gerritbot
}

image_clean() {
    rm -Rf ${dir}/usr/share/doc ${dir}/usr/share/info
    rm -Rf ${dir}/share ${dir}/usr/share/backgrounds
    put_git_mark ${dir}
}

final_image_clean() {
    # Remove build-requirements package
    do_chroot ${dir} yum remove -y ${BUILD_PKGS} &> /dev/null
    rm -Rf ${dir}/usr/local/share/gems/cache ${dir}/usr/local/share/gems/doc
    rm -Rf ${dir}/var/lib/yum/yumdb/*
    rm -Rf ${dir}/root/.cache
    rm -Rf ${dir}/root/.npm
    rm -Rf ${dir}/root/.gem
}

START=$(date '+%s')
function checkpoint {
    set +x
    NOW=$(date '+%s')
    ELAPSED=$(python -c "print('%03.2fmin' % (($NOW - $START) / 60.0))")
    echo "(STEP${STEP}) $ELAPSED - $*"
    START=$(date '+%s')
    [ -z "${DEBUG}" ] || set -x
}

trap cleanup 0

if [ -z "${dir}" ]; then
    fatal_error "dir variable is not set ! Exiting"
fi

check_binary yum
check_binary rpm

if [ "$STEP" == 1 ]; then
    bootstrap
    checkpoint "bootstrapped"
    install_sf_packages
    enable_selinux
    install_jenkins
    checkpoint "jenkins installed"
    install_redmine
    checkpoint "redmine installed"
    install_gerrit
    checkpoint "gerrit installed"
    install_elk
    checkpoint "elk installed"
    install_zuul
    checkpoint "zuul installed"
    install_nodepool
    checkpoint "nodepool installed"
    install_gerritbot
    checkpoint "gerritbot installed"
    install_murmurd
    install_pygerrit
    install_fonts
    install_edeploy
    install_serverspec
    checkpoint "pygerrit, fonts, edeploy, serverspect installed"
    install_etherpad
    install_paste
    install_bup
    install_mod_authpub_tkt
    checkpoint "etherpad, paste, bup, mod_authpub_tkt installed"
    image_clean
    do_chroot ${dir} passwd -l root
    checkpoint "image cleaned"
fi

if [ "$STEP" == 2 ]; then
    mount_fs
    . sf.install
    install_sf
    checkpoint "sf installed"
    image_clean
    final_image_clean
    checkpoint "image cleaned"
fi
