#!/bin/bash
#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -ex

# Target dir where the centos images will be built
dir="$1"
# Version is SF_VER
version="$2"

dist="centos"
CODENAME_MAJOR=7

export LC_ALL=C

ROLE=softwarefactory
export HOME=/root

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

ORIG=$(cd $(dirname $0); pwd)

if [ -z "$ORIG" ]; then
    echo "ORIG env variable must be set to the top dir of the sources" 1>&2
    exit 1
fi

if [ -z "$dir" ]; then
    echo "dir env variable must be set to the top dir of your destination directory" 1>&2
    exit 1
fi

. ${ORIG}/third_party_tools
. ${ORIG}/functions

BUNDLE_RETRIES=3

bootstrap() {
    local target=$dir

    mount_fs
    if [ -f "${target}/etc/sysctl.conf" ]; then
        return 0
    fi

    local release_rpm_url=$(add_main_repository)

    if [ ! -f "${target}/etc/redhat-release" ]; then
        rpm --initdb --root="$target"
        rpm -ivh --root "$target" $release_rpm_url
    fi

    sed -i 's/$releasever/7/g' ${target}/etc/yum.repos.d/*

    if [ ! -z "${http_proxy}" ]; then
        echo "Using proxies ${http_proxy} and ${https_proxy}" 1>&2
        # Do not use a mirror; these might change between builds and thus a lot
        # of requests are not missed at the cache
        sed -i 's/^#baseurl/baseurl/g' ${target}/etc/yum.repos.d/*
        sed -i 's/^mirrorlist/#mirrorlist/g' ${target}/etc/yum.repos.d/*

        echo -e "[main]\nproxy=${http_proxy}" >> ${target}/etc/yum.conf

    fi

    cp -f /etc/resolv.conf "$target/etc/"

    rpm --root="$target" --import $(ls $target/etc/pki/rpm-gpg/RPM-GPG-KEY-* | fgrep -v Debug)
    # We cannot use install_packages since the basesystem isn't yet setup
    yum --disableplugin=* --installroot $target install -y basesystem yum

    if [ -f  "$target"/root/.rpmdb/Packages ]; then
        mv -f "$target"/root/.rpmdb/*  "$target"/root/.rpmdb/.??* "$target"/var/lib/rpm/
        rmdir "$target"/root/.rpmdb
    fi

    if [ -f ${target}/usr/sbin/useradd ]; then
        fake_shadow_utils
    fi

    mkdir -p "$target/var/lib/edeploy/${version}"

    rebuild_db $target

    cp ${target}/etc/skel/.bashrc ${target}/root
    cp ${target}/etc/skel/.bash_profile ${target}/root
    cp -p ${ORIG}/check-ug.py ${target}/usr/sbin/
    cp -p ${ORIG}/mngids.py ${target}/usr/sbin/
    cp -p ${ORIG}/edeploy ${target}/usr/sbin/
    chmod +x ${target}/usr/sbin/check-ug.py
    chmod +x ${target}/usr/sbin/mngids.py
    chmod +x ${target}/usr/sbin/edeploy
    cp ${ORIG}/C7.0-ids.tables ${dir}/etc/ids.tables

    mkdir -p ${target}/usr/share/edeploy

    echo  'LANG=en_US.UTF-8' > ${target}/etc/locale.conf

    cat > ${target}/etc/sysconfig/network <<EOF
NETWORKING=yes
NOZEROCONF=yes
EOF
    chmod 0644 ${target}/etc/sysconfig/network

    # Adds sane default sysctl
    cat > ${target}/etc/sysctl.conf <<EOF
net.ipv4.ip_forward = 1
net.ipv4.ip_dynaddr = 0
net.ipv4.tcp_ecn = 0
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.icmp_echo_ignore_broadcasts = 1
kernel.sysrq = 0
EOF
    chmod 0400 ${target}/etc/sysctl.conf
}

install_sf_packages() {
    [ -f "${dir}/etc/yum.repos.d/puppetlabs.repo" ] || install_packages ${dir} ${PUPPET_REPO_URL}
    [ -f "${dir}/etc/yum.repos.d/epel.repo" ] || install_packages $dir epel-release
    [ -f "${dir}/etc/yum.repos.d/rdo-release.repo" ] || install_packages $dir https://www.rdoproject.org/repos/rdo-release.rpm
    http_fetch https://oss-binaries.phusionpassenger.com/yum/definitions/el-passenger.repo ${dir}/etc/yum.repos.d/passenger.repo

    install_packages ${dir} $BASE_PKGS
    install_packages ${dir} $PKGS
    install_packages ${dir} $DEV_PKGS
    install_packages ${dir} $RDO_PKGS
    install_packages ${dir} --enablerepo=epel-testing ${BASE_TESTING_PKGS}

    retry do_chroot ${dir} pip install --upgrade pip
    retry do_chroot ${dir} pip install ${PIP_PKGS}

    # don't rename net ifaces
    rm -f ${target}/etc/udev/rules.d/80-net-name-slot.rules
    ln -s /dev/null ${target}/etc/udev/rules.d/80-net-name-slot.rules

    # tune sshd conf
    grep -q "^UseDNS no" ${target}/etc/ssh/sshd_config || echo UseDNS no >> ${target}/etc/ssh/sshd_config
}

function install_jenkins {
    http_fetch http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo ${dir}/etc/yum.repos.d/jenkins.repo
    chroot $dir rpm --import http://pkg.jenkins-ci.org/redhat-stable/jenkins-ci.org.key

    [ -n "$JENKINS_VERSION" ] && JENKINS_VERSION="-${JENKINS_VERSION}"
    install_packages $dir jenkins${JENKINS_VERSION}

    [ -d ${dir}/var/lib/jenkins/plugins ] || mkdir -p ${dir}/var/lib/jenkins/plugins
    do_chroot $dir chown jenkins /var/lib/jenkins /var/lib/jenkins/plugins

    # Jenkins Swarm client
    swarm_client=$(basename $JENKINS_SWARM_CLIENT_URL)
    http_fetch $JENKINS_SWARM_CLIENT_URL ${dir}/var/lib/jenkins/${swarm_client}
    rm -f ${dir}/var/lib/jenkins/swarm-client-latest.jar
    ln -sf ${swarm_client} ${dir}/var/lib/jenkins/swarm-client-latest.jar

    # Jenkins ssh-agent plugin
    http_fetch $JENKINS_SSH_AGENT_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_SSH_AGENT_PLUGIN_URL)
    # Jenkins Gearman plugin
    http_fetch $JENKINS_GEARMAN_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_GEARMAN_PLUGIN_URL)

    # Jenkins Swarm plugin
    http_fetch $JENKINS_SWARM_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_SWARM_PLUGIN_URL)

    # Jenkins theme plugin
    http_fetch $JENKINS_THEME_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_THEME_PLUGIN_URL)

    # Jenkins credentials plugin
    http_fetch $JENKINS_CREDENTIALS_BINDING_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_CREDENTIALS_BINDING_URL)

    # http_fetch $JENKINS_CREDENTIALS_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_CREDENTIALS_URL)
    http_fetch $JENKINS_WORKFLOW_STEP_API_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_WORKFLOW_STEP_API_URL)
    http_fetch $JENKINS_PLAIN_CREDENTIALS_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_PLAIN_CREDENTIALS_URL)
    http_fetch $JENKINS_REVERSE_AUTH_PROXY_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_REVERSE_AUTH_PROXY_PLUGIN_URL)

    # Jenkins plugin to run scripts as publishers
    http_fetch $JENKINS_POST_BUILDSCRIPT_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_POST_BUILDSCRIPT_PLUGIN_URL)

    # Jenkins ZMQ event plugin
    http_fetch $JENKINS_ZMQ_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_ZMQ_PLUGIN_URL)

    # Jenkins Dashboard plugin
    http_fetch $JENKINS_DASHBOARD_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_DASHBOARD_PLUGIN_URL)

    # Jenkins Cobertura code coverage plugin
    http_fetch $JENKINS_COBERTURA_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_COBERTURA_URL)

    # Jenkins AnsiColor plugin
    http_fetch $JENKINS_ANSI_COLOR_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_ANSI_COLOR_PLUGIN_URL)

    # install zuul_swift_upload.py
    http_fetch $ZUUL_SWIFT_UPLOAD_URL ${dir}/usr/local/bin/zuul_swift_upload.py
    chmod +x ${dir}/usr/local/bin/zuul_swift_upload.py

    # make sure jenkins is disabled by default
    rm -Rf ${dir}/etc/rc.d/*/*jenkins*
}

function install_gerrit {
    # Gerrit
    [ -d "${dir}/root/gerrit_data_source/" ] || mkdir ${dir}/root/gerrit_data_source/
    http_fetch $GERRIT_URL ${dir}/root/gerrit_data_source/gerrit.war
    http_fetch $MYSQLJAVA_URL ${dir}/root/gerrit_data_source/mysql-connector-java.jar
    http_fetch $BCPROVJAVA_URL ${dir}/root/gerrit_data_source/bcprov.jar
    http_fetch $BCPKIXJAVA_URL ${dir}/root/gerrit_data_source/bcpkix.jar
}

function install_pygerrit {
    # Pygerrit
    if [ ! -d "${dir}/usr/lib/python2.7/site-packages/pygerrit" ]; then
        retry do_chroot ${dir} git clone https://github.com/morucci/pygerrit.git /srv/pygerrit
        do_chroot ${dir} bash -c 'cd /srv/pygerrit && python setup.py install'
        rm -Rf ${dir}/srv/pygerrit
    fi
}

function install_redmine {
    [ -d ${dir}/var/www/html ] || mkdir -p ${dir}/var/www/html
    [ -d ${dir}/var/log/httpd ] || mkdir -p ${dir}/var/log/httpd
    # Install Redmine
    if [ ! -d ${dir}/usr/share/redmine ]; then
        http_fetch $REDMINE_RHEL_URL ${dir}/usr/share/redmine.tar.gz
        do_chroot ${dir} bash -c "cd /usr/share && tar -xzpf redmine.tar.gz && mv redmine-${REDMINE_VERSION} redmine && chown -R root:root redmine"
        rm ${dir}/usr/share/redmine.tar.gz
        do_chroot ${dir} gem install bundler

        # We install this fake database file in order to force the bundle to activate the mysql2 lib
        # Redmine puppet manifest will overwrite it
        cat > ${dir}/usr/share/redmine/config/database.yml <<EOF
production:
  adapter: mysql2
  database: redmine
  host: localhost
  username: root
  password: ""
  encoding: utf8
EOF
        do_chroot ${dir} bash -c "cd /usr/share/redmine && bundle install" # --retry $BUNDLE_RETRIES"
    fi
    # Install Redmine backlog plugin
    [ -d ${dir}/usr/share/redmine/plugins ] || mkdir -p ${dir}/usr/share/redmine/plugins
    if [ ! -d ${dir}/usr/share/redmine/plugins/redmine_backlogs ]; then
        retry do_chroot ${dir} git clone --depeth 1 $REDMINE_BACKLOG_URL /usr/share/redmine/plugins/redmine_backlogs
        # An update of holidays gem 10/12/2014 to 1.0.7 leads to unable to deploy the backlog plugin
        # Check later if we can safely remove that :
        #cd ${dir}/usr/share/redmine/plugins/redmine_backlogs
        #sed -i 's/gem \"holidays\", \"~>1.0.3\"/gem \"holidays\", \"=1.0.6\"/' Gemfile
        #cd -
        do_chroot ${dir} bash -c "cd /usr/share/redmine/plugins/redmine_backlogs && bundle install" # --retry $BUNDLE_RETRIES"
        do_chroot ${dir} bash -c 'cd /usr/share/redmine && bundle update'
    fi

    # Install Redmine http plugin
    if [ ! -d ${dir}/usr/share/redmine/plugins/redmine_http_auth ]; then
        retry do_chroot ${dir} git clone --depth 1 $REDMINE_HTTP_PLUGIN_URL /usr/share/redmine/plugins/redmine_http_auth
    fi
}

install_edeploy() {
    cat > ${dir}/etc/rsyncd.conf << EOF
uid = root
gid = root

[install]
        path = /var/lib/debootstrap/install
        comment = eDeploy install trees

[metadata]
        path = /var/lib/debootstrap/metadata
        comment = eDeploy metadata
EOF

    cat > ${dir}/var/lib/edeploy/conf << EOF
VERS=${version}
ROLE=softwarefactory
RSERV_PORT=873
RSERV=managesf
EOF
}

function install_bup {
    if [ ! -d ${dir}/opt/bup ]; then
        do_chroot ${dir} mkdir -p /opt/bup
        do_chroot ${dir} git clone --depth 1 ${BUP_URL} /opt/bup/
        do_chroot ${dir} bash -c 'cd /opt/bup && git checkout ${BUP_VERSION}'
        do_chroot ${dir} bash -c 'cd /opt/bup && ./configure && make && make install'
    fi
}

install_serverspec() {
    retry do_chroot ${dir} gem install serverspec -v ${SERVERSPEC_VERSION}
}

function install_mod_authpub_tkt {
    # Install mod authpub tkt for apache (SSO)
    if [ ! -f ${dir}/usr/lib64/httpd/modules/mod_auth_pubtkt.so ]; then
        http_fetch $MOD_AUTH_PUBTKT_URL ${dir}/tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}.tar.gz
        do_chroot ${dir} bash -c "cd /tmp && tar -xvzf mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}.tar.gz"
        do_chroot ${dir} bash -c "cd /tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION} && unset DEBUG && ./configure --apxs=/usr/bin/apxs && make && make install"
        do_chroot ${dir} rm -Rf /tmp/mod_auth_pubtkt-${MOD_AUTH_PUBTKT_VERSION}
    fi
}

function install_fonts {
    # Twitter Bootstrap - http://getbootstrap.com/
    if [ ! -d ${dir}/var/www/static/bootstrap ]; then
        http_fetch $BOOTSTRAP_URL ${dir}/tmp/bootstrap.zip
        do_chroot ${dir} unzip -q -o /tmp/bootstrap.zip -d /var/www/static/
        do_chroot ${dir} mv /var/www/static/bootstrap-${BOOTSTRAP_VERSION}-dist /var/www/static/bootstrap
        do_chroot ${dir} rm /tmp/bootstrap.zip
    fi

    # Font Awesome - http://fortawesome.github.io/Font-Awesome/
    if [ ! -d ${dir}/var/www/static/font-awesome ]; then
        http_fetch $FONTAWESOME_URL ${dir}/tmp/font-awesome.zip
        do_chroot ${dir} unzip -q -o /tmp/font-awesome.zip -d /var/www/static/
        do_chroot ${dir} mv /var/www/static/Font-Awesome-${FONTAWESOME_VERSION} /var/www/static/font-awesome
        do_chroot ${dir} rm /tmp/font-awesome.zip
    fi

    [ -d ${dir}/var/www/static/js ] || do_chroot ${dir} mkdir /var/www/static/js
    # JQuery - http://jquery.com/
    http_fetch $JQUERY_URL ${dir}/var/www/static/js/jquery.min.js
    # AngularJS
    http_fetch $ANGULARJS_URL ${dir}/var/www/static/js/angular.min.js
}

function install_zuul {
    # zuul
    if [ ! -f ${dir}/usr/bin/zuul ]; then
        [ -d ${dir}/srv/zuul ] || retry do_chroot ${dir} git clone ${ZUUL_URL} /srv/zuul
        do_chroot ${dir} bash -c "cd /srv/zuul && git checkout -b working ${ZUUL_VERSION}"
        # Install dependencies first
        #retry do_chroot ${dir} bash -c "cd /srv/zuul && pip install -U -r requirements.txt"
        do_chroot ${dir} bash -c "cd /srv/zuul && python setup.py install"
        mv ${dir}/srv/zuul/etc/status/public_html/ ${dir}/var/www/zuul
        rm -Rf ${dir}/srv/zuul
    fi
    [ -h ${dir}/var/www/zuul/bootstrap ] || ln -s /var/www/static/bootstrap ${dir}/var/www/zuul/bootstrap
    http_fetch $JQUERY_VISIBILITY_URL ${dir}/var/www/zuul/jquery-visibility.min.js
    http_fetch $JQUERY_GRAPHITE_URL ${dir}/var/www/zuul/jquery.graphite.js
}

function install_nodepool {
    # nodepool
    if [ ! -f ${dir}/usr/bin/nodepool ]; then
        [ -d ${dir}/srv/nodepool ] || retry do_chroot ${dir} git clone ${NODEPOOL_URL} /srv/nodepool
        do_chroot ${dir} bash -c "cd /srv/nodepool && git checkout -b working ${NODEPOOL_VERSION}"
        do_chroot ${dir} bash -c "cd /srv/nodepool && python setup.py install"
        rm -Rf ${dir}/srv/nodepool
    fi


    #retry do_chroot ${dir} pip install nodepool==${NODEPOOL_VERSION}
    echo "nop"
}

function install_etherpad {
    # Etherpad_lite
    if [ ! -d "${dir}/var/www/etherpad-lite" ]; then
        http_fetch $ETHERPAD_LITE_URL ${dir}/tmp/etherpad_lite.tar.gz
        http_fetch $NODEJS_NPM ${dir}/tmp/npm-install.sh
        ## Try to avoid the failure in jenkins
        do_chroot ${dir} sed -i "s#</dev/tty##" /tmp/npm-install.sh
        [ ! -d "${dir}/var/www/etherpad-lite" ] && mkdir -p ${dir}/var/www/etherpad-lite
        do_chroot ${dir} tar -xzf /tmp/etherpad_lite.tar.gz --strip-components=1 -C /var/www/etherpad-lite
        # /bin/installDeps.sh is looking for /usr/bin/node
        [ ! -e "${dir}/usr/bin/node" ] && do_chroot ${dir} ln -s /usr/bin/nodejs /usr/bin/node
        # Node or npm seems to deals with SUDO_UID and SUDO_GID that for results set new created
        # files as user id/gid referenced by sudo. So force id/gid to 0 (root)
        SUDO_UID=0 SUDO_GID=0 npm_install=$NPM_INSTALL do_chroot ${dir} sh /tmp/npm-install.sh
        ## Use a mirror
        do_chroot ${dir} sed -i "s|npm install|npm --registry ${NPM_MIRROR_URL} install|" /var/www/etherpad-lite/bin/installDeps.sh
        SUDO_UID=0 SUDO_GID=0 retry do_chroot ${dir} sh /var/www/etherpad-lite/bin/installDeps.sh
        # Include topmenu in Etherpad
        cat << EOF | patch ${dir}/var/www/etherpad-lite/src/templates/index.html
38a39
>         <script type="text/javascript" src="/static/js/topmenu.js"></script>
53d53
<               border-top: 8px solid rgba(51,51,51,.8);
EOF
        cat << EOF | patch ${dir}/var/www/etherpad-lite/src/templates/pad.html
50a51
>         <script type="text/javascript" src="/static/js/topmenu.js"></script>
EOF
    fi
}

function install_paste {
    # Paste (Lodgeit)
    if [ ! -d "${dir}/srv/lodgeit" ]; then
        do_chroot ${dir} mkdir -p /srv/lodgeit
        retry do_chroot ${dir} git clone ${PASTE_URL} /srv/lodgeit/lodgeit
        do_chroot ${dir} bash -c "cd /srv/lodgeit/lodgeit && git checkout ${PASTE_VERSION}"
        do_chroot ${dir} chown -R apache:apache /srv/lodgeit

        # Replace absolute URLs beginning with /static/
        do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/layout.html
        do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/help/advanced.html
        do_chroot ${dir} sed -i -e 's#/static/#/static/lodgeit/#g' /srv/lodgeit/lodgeit/lodgeit/views/help/pasting.html
        # Include topmenu in Paste
        cat << EOF | patch ${dir}/srv/lodgeit/lodgeit/lodgeit/views/layout.html
11a12
>     <script type="text/javascript" src="/static/js/topmenu.js"></script>
EOF
    fi
}

install_misc() {
    # install third party puppet modules
    retry do_chroot $dir puppet module install puppetlabs-ntp --environment=sf

    [ -d ${dir}/var/lib/grafana ] || install_packages ${dir} ${GRAFANA_URL}
}

image_clean() {
    rm -Rf ${dir}/usr/share/doc
    rm -Rf ${dir}/usr/share/info
}

final_image_clean() {
    rm -Rf ${dir}/root/.cache
    rm -Rf ${dir}/root/.npm
    rm -Rf ${dir}/root/.gem
    rm -Rf ${dir}/share/
    rm -Rf ${dir}/var/lib/yum/yumdb/*
}

trap cleanup 0

if [ -z "${dir}" ]; then
    fatal_error "dir variable is not set ! Exiting"
fi

check_binary yum
check_binary rpm

if [ "$STEP" == 1 ]; then
    bootstrap
    install_sf_packages
    disable_selinux

    install_jenkins
    install_redmine
    install_gerrit
    install_pygerrit
    install_fonts
    install_edeploy
    install_serverspec
    install_zuul
    install_nodepool
    install_etherpad
    install_paste
    install_misc
    install_bup
    install_mod_authpub_tkt
    image_clean
    check_rpm_packages ${dir} "${RPM_PKGS}"
    check_pip_packages ${dir} "${PIP_PKGS}"
    put_git_mark ${dir}
    do_chroot ${dir} passwd -l root
fi

if [ "$STEP" == 2 ]; then
    mount_fs
    . sf.install
    install_sf
    image_clean
    final_image_clean
fi
