# -*- shell-script -*-

ORIG=${SDIR}/build
SRC=$(cd $(dirname $0); pwd)

function put_git_mark {
    local dir=$1
    sha=`git rev-parse HEAD`
    echo $sha >> ${dir}/etc/SF_GIT_COMMIT
}

function _http_fetch {
    local remote_location=$1
    local local_location=$2
    # We retry 12 times with 10 seconds delay between retries
    curl --silent --show-error --retry 12 --retry-delay 10 -L -o $local_location $remote_location
    curl_result=$?
    if [ "$curl_result" -ne "0" ]; then
        echo "curl failed to fetch $remote_location with error $curl_result"
        exit $curl_result
    fi
}

function disable_selinux {
    if [ -f "${dir}/etc/selinux/config" ]; then
        sed -i "s/^SELINUX=.*/SELINUX=disabled/" "${dir}/etc/selinux/config"
    fi
}

function retry {
    # This is a really dumb retry function
    local max_retries=3
    local delay=3
    for i in $(seq $max_retries); do
        "$@" && return 0
        echo "The command return $? as error code. Retry (attempt $i) ..."
        sleep $delay
    done
    return 1
}

function http_fetch {
    retry _http_fetch "$@"
}


function clean {
    target=$1
    rm -rf ${target}/var/tmp/* ${target}/tmp/*
    clear_packages_cache $target
    rm -f ${target}/var/cache/yum/*/packages/*rpm
    remove_epel_repository $DIST
    clear_packages_cache ${dir}
}

. ${ORIG}/common

if [ -z "$dir" -o ! -d "$src" -o -z "$version" ]; then
    echo "Usage: $0 <base directory> <target directory name> <version>" 1>&2
    exit 1
fi

if [ -z "${SRC}" ]; then
    SRC="${ORIG}"
fi

check_variables

set -e

# not nested call check
if [ ${src} != ${dir} ]; then
    echo -n "Copying tree ${src}/ to ${dir}/ "
    rsync -aX --delete --numeric-ids ${src}/ ${dir}/
    echo ": done"
fi
