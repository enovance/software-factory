#!/bin/bash
#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -e

ORIG=$(cd $(dirname $0); pwd)
. ${ORIG}/third_party_tools

# Check for testing packages
if grep -q testing /etc/yum.repos.d/zuul-built.repo 2> /dev/null; then
    TESTING_URL="$(grep '\/zuul-build\/' /etc/yum.repos.d/zuul-built.repo | cut -d= -f2)"
    ENABLED_REPOS="sftesting,"
fi
if test -f /var/lib/sf/zuul-rpm-build/repodata/repomd.xml; then
    LOCAL_TESTING="/var/lib/sf/zuul-rpm-build"
    ENABLED_REPOS+="local-testing,"
fi

if [ "${USE_SWIFT_CACHE}" == "yes" ]; then
    ENABLED_REPOS+="sfbase,sfextras,sfupdates,sfepel,sfrdo,sfjenkins,sfpassenger,sf,sfrelease"
    DISABLED_REPOS="*"
    INSTALL_OPTIONS="--disablerepo=${DISABLED_REPOS} --enablerepo=${ENABLED_REPOS}"
    ANSIBLE_EXTRA_VARS="yum_disable_repo=* yum_enable_repo=${ENABLED_REPOS}"
fi


[ -z "$DEBUG" ] || set -x
# Target dir where the centos images will be built
dir="$1"
# Version is SF_VER
version="$2"

dist="centos"
CODENAME_MAJOR=7
ROLE=softwarefactory
export LC_ALL=C
export HOME=/root
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

if [ -z "$ORIG" ]; then
    echo "ORIG env variable must be set to the top dir of the sources" 1>&2
    exit 1
fi

if [ -z "${dir}" ]; then
    echo "dir env variable must be set to the top dir of your destination directory" 1>&2
    exit 1
fi

. ${ORIG}/functions

bootstrap() {
    mount_fs

    # We need to enable the sf-mirror on the build host for bootstrapping
    cat > /etc/yum.repos.d/sf-mirror.repo <<EOF
[sfbase]
name=CentOS-7 - Base
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/base/
gpgcheck=1
enabled=0

[sfextras]
name=CentOS-7 - Extras
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/extras/
gpgcheck=1
enabled=0

[sfupdates]
name=CentOS-7 - Updates
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/updates/
gpgcheck=1
enabled=0

[sfepel]
name=Extra Packages for Enterprise Linux 7
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/epel/
gpgcheck=1
enabled=0

[sfrdo]
name=openstack-newton
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/openstack-newton/
gpgcheck=1
enabled=0

[sfjenkins]
name=Jenkins packages
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/jenkins/
gpgcheck=1
enabled=0

[sfpassenger]
name=Passenger
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/repomirror/passenger/
gpgcheck=0
enabled=0

[sf]
name=SF repository for various packages
baseurl=http://46.231.132.68:8080/v1/AUTH_b50e80d3969f441a8b7b1fe831003e0a/rpms/
gpgcheck=0
enabled=1

[sfrelease]
name=SF released packages
baseurl=http://46.231.133.231/kojifiles/repos/sf-master-centos7-build/latest/x86_64/
gpgcheck=0
enabled=1
EOF
    # Check for testing packages
    if test -n "${TESTING_URL}"; then
        cat >> /etc/yum.repos.d/sf-mirror.repo << EOF
[sftesting]
name=SF testing packages
baseurl=${TESTING_URL}
gpgcheck=0
enabled=1
priority=1
EOF
    fi
    # Check for local testing packages
    if test -n "${LOCAL_TESTING}"; then
        cat >> /etc/yum.repos.d/sf-mirror.repo << EOF
[local-testing]
name=SF local testing packages
baseurl=file://${LOCAL_TESTING}/
gpgcheck=0
enabled=1
priority=1
EOF
        mkdir -p "${dir}/${LOCAL_TESTING}"
        rsync -a --delete "${LOCAL_TESTING}/" "${dir}/${LOCAL_TESTING}/"
    fi

    mkdir -p ${dir}/etc/pki/rpm-gpg/
    rsync -a --delete ${ORIG}/keys/ ${dir}/etc/pki/rpm-gpg/

    if [ ! -f "${dir}/etc/redhat-release" ]; then
        local release_rpm_url=$(add_main_repository)
        rpm --initdb --root="${dir}"
        rpm -ivh --root "${dir}" $release_rpm_url
    fi

    sed -i 's/$releasever/7/g' ${dir}/etc/yum.repos.d/*

    # Add the SF repo mirror
    cp /etc/yum.repos.d/sf-mirror.repo ${dir}/etc/yum.repos.d/

    cp -f /etc/resolv.conf ${dir}/etc/

    if [ ! -f "${dir}/usr/bin/yum" ]; then
        rpm --root="${dir}" --import $(ls ${dir}/etc/pki/rpm-gpg/*.key | fgrep -v Debug)
        # We cannot use install_packages since the basesystem isn't yet setup
        yum --disableplugin=* --installroot ${dir} ${INSTALL_OPTIONS} install -y basesystem yum shadow-utils
        echo "/dev/root / ext4 errors=remount-ro 0 1" > ${dir}/etc/fstab
        checkpoint "first bootstrap"
    elif [ -f "${dir}/usr/bin/yum-complete-transaction" ]; then
        do_chroot ${dir} yum-complete-transaction --cleanup-only
        do_chroot ${dir} yum update -y ${INSTALL_OPTIONS}
    fi

    cp -p ${ORIG}/edeploy/* ${dir}/usr/sbin/
    cp ${ORIG}/C7.0-ids.tables ${dir}/etc/ids.tables
    fake_shadow_utils

    [ -d "${dir}/var/lib/edeploy/${version}" ] || mkdir -p "${dir}/var/lib/edeploy/${version}"

    rebuild_db ${dir}

    cp ${dir}/etc/skel/.bashrc ${dir}/root
    cp ${dir}/etc/skel/.bash_profile ${dir}/root

    mkdir -p ${dir}/usr/share/edeploy

    echo  'LANG=en_US.UTF-8' > ${dir}/etc/locale.conf

    [ -d ${dir}/etc/dracut.conf.d/ ] || mkdir ${dir}/etc/dracut.conf.d/
    cat > ${dir}/etc/dracut.conf.d/img.conf <<EOF
filesystems+="ext4"
EOF

    cat > ${dir}/etc/sysconfig/network <<EOF
NETWORKING=yes
NOZEROCONF=yes
EOF
    chmod 0644 ${dir}/etc/sysconfig/network
}

enable_selinux() {
    # Force SELinux relabel
    touch ${dir}/.autorelabel

    # TODO: replace "permissive" by "enforcing" once there are no more avc message
    sed -i "s/^SELINUX=.*/SELINUX=permissive/" "${dir}/etc/selinux/config"
}

install_sf_packages() {
    do_chroot ${dir} bash -c 'for key in /etc/pki/rpm-gpg/*.key; do rpm --import $key; done'
    install_packages ${dir} $CENTOS_PKGS $BUILD_PKGS $SF_PKGS

    checkpoint "centos rpms installed"

    [ -f "${dir}/etc/yum.repos.d/epel.repo" ] || install_packages ${dir} epel-release
    [ -f "${dir}/etc/yum.repos.d/rdo-release.repo" ] || install_packages ${dir} ${RDO_REPO}
    install_packages ${dir} ${EPEL_PKGS} ${RDO_PKGS}
    checkpoint "epel+rdo rpms installed"

    if [ ! -f "${dir}/usr/lib64/httpd/modules/mod_passenger.so" ]; then
        http_fetch ${PASSENGER_REPO} ${dir}/etc/yum.repos.d/passenger.repo
        install_packages ${dir} ${PASSENGER_PKGS}
        rm -f ${dir}/etc/yum.repos.d/passenger.repo
        checkpoint "passenger installed"
    fi

    retry do_chroot ${dir} pip install --upgrade 'pip<8'
    retry do_chroot ${dir} pip install ${PIP_PKGS}
    checkpoint "pip packages installed"

    # install zuul_swift_upload.py
    http_fetch $ZUUL_SWIFT_UPLOAD_URL ${dir}/usr/local/bin/zuul_swift_upload.py
    chmod +x ${dir}/usr/local/bin/zuul_swift_upload.py

    [ -d ${dir}/var/lib/grafana ] || install_packages ${dir} ${GRAFANA_URL}
}

function install_jenkins {
    [ -d ${dir}/var/lib/jenkins/plugins ] || mkdir -p ${dir}/var/lib/jenkins/plugins

    # Jenkins Swarm client
    swarm_client=$(basename $JENKINS_SWARM_CLIENT_URL)
    http_fetch $JENKINS_SWARM_CLIENT_URL ${dir}/var/lib/jenkins/${swarm_client}
    rm -f ${dir}/var/lib/jenkins/swarm-client-latest.jar
    ln -sf ${swarm_client} ${dir}/var/lib/jenkins/swarm-client-latest.jar

    # Jenkins ssh-agent plugin
    http_fetch $JENKINS_SSH_AGENT_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_SSH_AGENT_URL)
    # Jenkins Gearman plugin
    http_fetch $JENKINS_GEARMAN_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_GEARMAN_PLUGIN_URL)

    # Jenkins Swarm plugin
    http_fetch $JENKINS_SWARM_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_SWARM_URL)

    # Jenkins timestamper plugin
    http_fetch $JENKINS_TIMESTAMPER_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_TIMESTAMPER_URL)

    # Jenkins theme plugin
    http_fetch $JENKINS_SIMPLE_THEME_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_SIMPLE_THEME_PLUGIN_URL)

    # Jenkins credentials plugin
    http_fetch $JENKINS_CREDENTIALS_BINDING_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_CREDENTIALS_BINDING_URL)
    http_fetch $JENKINS_WORKFLOW_STEP_API_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_WORKFLOW_STEP_API_URL)
    http_fetch $JENKINS_PLAIN_CREDENTIALS_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_PLAIN_CREDENTIALS_URL)
    http_fetch $JENKINS_REVERSE_PROXY_AUTH_PLUGIN_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_REVERSE_PROXY_AUTH_PLUGIN_URL)

    # Jenkins plugin to run scripts as publishers
    http_fetch $JENKINS_POSTBUILDSCRIPT_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_POSTBUILDSCRIPT_URL)

    # Jenkins ZMQ event plugin
    http_fetch $JENKINS_ZMQ_EVENT_PUBLISHER_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_ZMQ_EVENT_PUBLISHER_URL)

    # Jenkins Dashboard plugin
    http_fetch $JENKINS_DASHBOARD_VIEW_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_DASHBOARD_VIEW_URL)

    # Jenkins Cobertura code coverage plugin
    http_fetch $JENKINS_COBERTURA_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_COBERTURA_URL)

    # Jenkins AnsiColor plugin
    http_fetch $JENKINS_ANSICOLOR_URL ${dir}/var/lib/jenkins/plugins/$(basename $JENKINS_ANSICOLOR_URL)

    # make sure jenkins is disabled by default
    rm -Rf ${dir}/etc/rc.d/*/*jenkins*
}

function install_gerrit {
    # Gerrit
    [ -d "${dir}/root/gerrit_data_source/" ] || mkdir ${dir}/root/gerrit_data_source/
    http_fetch $GERRIT_URL ${dir}/root/gerrit_data_source/gerrit.war
    http_fetch $MYSQLJAVA_URL ${dir}/root/gerrit_data_source/mysql-connector-java.jar
    http_fetch $BCPROVJAVA_URL ${dir}/root/gerrit_data_source/bcprov.jar
    http_fetch $BCPKIXJAVA_URL ${dir}/root/gerrit_data_source/bcpkix.jar
}

function install_redmine {
    # Disable gem rdoc installation
    echo gem: --no-rdoc --no-ri > ${dir}/root/.gemrc

    # Ensure basic directories
    [ -d ${dir}/var/www/html ] || mkdir -p ${dir}/var/www/html
    [ -d ${dir}/var/log/httpd ] || mkdir -p ${dir}/var/log/httpd

    # Install Redmine
    if [ -d ${dir}/var/www/redmine ]; then
        head ${dir}/var/www/redmine/doc/CHANGELOG | grep "${REDMINE_VERSION}$" || {
            rm -Rf ${dir}/var/www/redmine
            checkpoint "Removed outdated redmine version..."
        }
    fi

    # Remove old install directory
    rm -Rf ${dir}/usr/share/redmine

    # Install Redmine
    if [ ! -d ${dir}/var/www/redmine ]; then
        http_fetch $REDMINE_RHEL_URL ${dir}/var/www/redmine.tar.gz
        do_chroot ${dir} tar -xzpf /var/www/redmine.tar.gz -C /var/www
        cat > ${dir}/var/www/redmine-${REDMINE_VERSION}/config/database.yml <<EOF
production:
  adapter: mysql2
  database: redmine
  host: localhost
  username: root
  password: ""
  encoding: utf8
EOF
        SUDO_UID=0 SUDO_GID=0 do_chroot ${dir} bash -c "cd /var/www/redmine-${REDMINE_VERSION} && bundle install --without development test"
        mv ${dir}/var/www/redmine-${REDMINE_VERSION} ${dir}/var/www/redmine
        rm ${dir}/var/www/redmine.tar.gz
        SUDO_UID=0 SUDO_GID=0 do_chroot ${dir} bash -c "cd /var/www/redmine/ && gem uninstall mysql2 && bundle update" || {
            rm -Rf /var/www/redmine
            exit 1
        }
    fi

    # Install Redmine backlog plugin
    [ -d ${dir}/var/www/redmine/plugins ] || mkdir -p ${dir}/var/www/redmine/plugins
    if [ ! -d ${dir}/var/www/redmine/plugins/redmine_backlogs ]; then
        retry do_chroot ${dir} git clone -b ${REDMINE_BACKLOG_VERSION} $REDMINE_BACKLOG_URL /var/www/redmine/plugins/redmine_backlogs
        do_chroot ${dir} bash -c "cd /var/www/redmine/plugins/redmine_backlogs; patch Gemfile" < ./patches/redmine_backlog_gemfile.patch
        SUDO_UID=0 SUDO_GID=0 do_chroot ${dir} bash -c "cd /var/www/redmine/plugins/redmine_backlogs && bundle install --without development test"
    fi

    # Install Redmine http plugin
    if [ ! -d ${dir}/var/www/redmine/plugins/redmine_http_auth ]; then
        retry do_chroot ${dir} git clone $REDMINE_HTTP_PLUGIN_URL /var/www/redmine/plugins/redmine_http_auth
        do_chroot ${dir} bash -c "cd /var/www/redmine/plugins/redmine_http_auth; git checkout -b sf_pinned ${REDMINE_HTTP_PLUGIN_VERSION}"
    fi

    # Set files permissions (according to: http://www.redmine.org/projects/redmine/wiki/redmineinstall )
    mkdir -p ${dir}/var/www/redmine/{tmp,tmp/pdf,public/plugin_assets}
    do_chroot ${dir} chown -R apache:apache /var/www/redmine/{files,log,tmp,public/plugin_assets}
    do_chroot ${dir} chmod -R 755 /var/www/redmine/{files,log,tmp,public/plugin_assets}
}

install_edeploy() {
    cat > ${dir}/etc/rsyncd.conf << EOF
uid = root
gid = root

[install]
path = /var/lib/debootstrap/install
comment = eDeploy install trees

[metadata]
path = /var/lib/debootstrap/metadata
comment = eDeploy metadata
EOF
    cat > ${dir}/var/lib/edeploy/conf << EOF
VERS=${version}
ROLE=softwarefactory
RSERV_PORT=873
RSERV=managesf
EOF
}

install_murmurd() {
    if [ ! -d ${dir}/usr/local/murmur ]; then
        http_fetch $MURMUR_URL ${dir}/tmp/murmur.tar.bz2
        tar -xjf ${dir}/tmp/murmur.tar.bz2 -C ${dir}/tmp/
        mv ${dir}/tmp/murmur-static_x86-${MURMUR_VERSION} ${dir}/usr/local/murmur
    fi
}

install_serverspec() {
    retry do_chroot ${dir} gem install serverspec -v ${SERVERSPEC_VERSION}
}

function copy_sf_ansible_roles {
    rsync --delete -a --no-owner ./../config/ansible/ ${dir}/etc/ansible/
}

image_clean() {
    rm -Rf ${dir}/usr/share/doc ${dir}/usr/share/info
    rm -Rf ${dir}/share ${dir}/usr/share/backgrounds
    rm -Rf ${dir}/usr/local/share/gems/cache ${dir}/usr/local/share/gems/doc
    rm -Rf ${dir}/root/.cache
    rm -Rf ${dir}/root/.npm
    rm -Rf ${dir}/root/.gem
    rm -Rf ${dir}/root/.rpmdb
}

remove_obsolete() {
    do_chroot ${dir} rpm -q python-glob2 2> /dev/null || {
        rm -Rf ${dir}/usr/lib/python2.7/site-packages/glob2*
    }
    do_chroot ${dir} rpm -q mod_auth_pubtkt 2> /dev/null || {
        rm -f ${dir}/usr/lib64/httpd/modules/mod_auth_pubtkt.so
    }
    rm -Rf ${dir}/usr/src/git*
    rm -Rf ${dir}/srv/lodgeit

    # Gemfile is a sign /var/www/static was setup manually. It's now replaced by sf-web-assets package
    if [ -f ${dir}/var/www/static/font-awesome/Gemfile ]; then
        rm -Rf ${dir}/var/www/static
    fi
}

fix_ansible_issue5504() {
    sed -i "s/after=remote_head, //" ${dir}/usr/lib/python2.7/site-packages/ansible/modules/core/source_control/git.py
}

function install_sf {
    set -e
    test -n "${CAUTH_CLONED_PATH}"
    test -n "${MANAGESF_CLONED_PATH}"
    test -n "${PYSFLIB_CLONED_PATH}"
    test -n "${SFMANAGER_CLONED_PATH}"

    mkdir -p ${dir}/usr/src

    cp -f /etc/resolv.conf "${dir}/etc/"

    if [ ! -z "${STAGING_PKGS}" ]; then
        install_packages ${dir} ${STAGING_PKGS}
    fi
    if [ ! -z "${STAGING_PIP}" ]; then
        retry do_chroot ${dir} pip install 'pip<8' ${STAGING_PIP}
    fi

    # Make sure subproject are available
    if [ ! -d "${CAUTH_CLONED_PATH}" ] || [ ! -d "${MANAGESF_CLONED_PATH}" ] || \
        [ ! -d "${PYSFLIB_CLONED_PATH}" ] || [ ! -d "${SFMANAGER_CLONED_PATH}" ]; then
        echo "Can't find subprojects in $(dirname ${CAUTH_CLONED_PATH})"
        echo "Run ./image/fetch_subprojects.sh first"
        exit -1
    fi

    # Make sure final image use latest ids.tables
    cp ./C7.0-ids.tables ${dir}/etc/ids.tables

    # Disable postfix and remove configuration to reduce puppet noise
    # Disable postfix and remove configuration
    do_chroot ${dir} systemctl disable postfix
    for i in main.cf virtual; do
        echo -n > ${dir}/etc/postfix/$i
    done

    # Install ansible playbooks and configuration files
    do_chroot ${dir} mkdir -p /etc/software-factory
    rsync --delete -a --no-owner ./../serverspec/ ${dir}/etc/serverspec/

    # Sf-config
    rsync -a --no-owner ./../config/scripts/ ${dir}/usr/local/bin/
    rsync --delete -a -L --no-owner ./../config/defaults/ ${dir}/etc/software-factory/
    rsync --delete -a -L --no-owner ./../config/defaults/ ${dir}/usr/local/share/sf-default-config/
    rsync --delete -a --no-owner ./../config/ansible/ ${dir}/etc/ansible/
    mkdir -p ${dir}/etc/software-factory ${dir}/etc/ansible/group_vars ${dir}/var/lib/ansible
    rsync --delete -a --no-owner ./../health-check/ ${dir}/etc/ansible/health-check/

    cp -Rv ./../config/config-repo/ ${dir}/usr/local/share/sf-config-repo
    cp -Rv ./../tools/slaves/ ${dir}/usr/local/share/sf-jenkins-slave-tools
    # Also copy tool in image PATH so that sf image could
    # be used as slave base image
    cp -Rv ./../tools/slaves/* ${dir}/usr/local/bin/

    # Install cauth
    rsync -a --delete ${CAUTH_CLONED_PATH}/ ${dir}/usr/src/cauth/
    do_chroot ${dir} bash -c "cd /usr/src/cauth; /var/www/cauth/bin/python setup.py install"

    # Install managesf
    rsync -a --delete ${MANAGESF_CLONED_PATH}/ ${dir}/usr/src/managesf/
    do_chroot ${dir} bash -c "cd /usr/src/managesf; /var/www/managesf/bin/python setup.py install"

    # Install python-sfmanager
    rsync -a --delete ${SFMANAGER_CLONED_PATH}/ ${dir}/usr/src/python-sfmanager/
    do_chroot ${dir} bash -c "cd /usr/src/python-sfmanager; /srv/sfmanager/bin/python setup.py install --install-scripts /usr/bin"

    # Install pysflib
    rsync -a --delete ${PYSFLIB_CLONED_PATH}/ ${dir}/usr/src/pysflib/
    do_chroot ${dir} bash -c "cd /usr/src/pysflib; /var/www/cauth/bin/python setup.py install"
    do_chroot ${dir} bash -c "cd /usr/src/pysflib; /var/www/managesf/bin/python setup.py install"
    do_chroot ${dir} bash -c "cd /usr/src/pysflib; /srv/sfmanager/bin/python setup.py install"

    do_chroot ${dir} find /root /var/www /srv/ -name "*.pyc" -exec rm {} \;

    # Documentation
    DOCBUILDDIR=$(mktemp -d /tmp/sfdocs_buildXXXXXXX)
    rm -Rf ${dir}/var/www/docs
    mkdir ${dir}/var/www/docs
    cd ${DOCDIR} && make BUILDDIR=$DOCBUILDDIR MANAGESF_CLONED_PATH=${MANAGESF_CLONED_PATH} SFMANAGER_CLONED_PATH=${SFMANAGER_CLONED_PATH} html ; cd -
    mv $DOCBUILDDIR/html/* ${dir}/var/www/docs/
    rm -rf $DOCBUILDDIR

    # Deactivate default disabling of root ssh access of cloud-init
    sed -i 's/disable_root:.*/disable_root: 0/' ${dir}/etc/cloud/cloud.cfg

    # Set a default password. This is needed when image is booted when metadata servers
    # are not available. Cloudinit will deactivate root auth by password.
    do_chroot ${dir} bash -c "passwd -d root"
    # Be sure sshd disallow authentication by password (only allowed by key)
    sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' ${dir}/etc/ssh/sshd_config
}

START=$(date '+%s')
function checkpoint {
    set +x
    NOW=$(date '+%s')
    ELAPSED=$(python -c "print('%03.2fmin' % (($NOW - $START) / 60.0))")
    echo "(STEP1) $ELAPSED - $*"
    START=$(date '+%s')
    [ -z "${DEBUG}" ] || set -x
}

trap cleanup 0

if [ -z "${dir}" ]; then
    fatal_error "dir variable is not set ! Exiting"
fi

check_binary yum
check_binary rpm

build_all() {
    bootstrap
    checkpoint "bootstrapped"
    install_sf_packages
    fix_ansible_issue5504
    checkpoint "sf dep packages installed"
    enable_selinux
    checkpoint "selinux configured"
    install_jenkins
    checkpoint "jenkins installed"
    install_redmine
    checkpoint "redmine installed"
    install_gerrit
    checkpoint "gerrit installed"
    install_murmurd
    install_edeploy
    install_serverspec
    checkpoint "murmurd, edeploy, serverspec installed"
    remove_obsolete
    copy_sf_ansible_roles
    # Copy prepared source to support depends-on
    rsync -a --delete --exclude 'build' ${MANAGESF_CLONED_PATH}/ ${dir}/usr/src/managesf/
    rsync -a --delete --exclude 'build' ${CAUTH_CLONED_PATH}/ ${dir}/usr/src/cauth/
    rsync -a --delete --exclude 'build' ${SFMANAGER_CLONED_PATH}/ ${dir}/usr/src/python-sfmanager/
    rsync -a --delete --exclude 'build' ${PYSFLIB_CLONED_PATH}/ ${dir}/usr/src/pysflib/
    ansible_install sf-base "${BASE_EXTRA_VARS}"
    ansible_install sf-gateway
    ansible_install sf-managesf "$MANAGESF_EXTRA_VARS"
    ansible_install sf-cauth "$CAUTH_EXTRA_VARS"
    ansible_install sf-lecm "$LECM_EXTRA_VARS"
    ansible_install sf-zuul "$ZUUL_EXTRA_VARS"
    ansible_install sf-lodgeit
    ansible_install sf-etherpad "$ETHERPAD_EXTRA_VARS"
    ansible_install sf-gerritbot "$GERRITBOT_EXTRA_VARS"
    ansible_install sf-gitweb
    ansible_install sf-nodepool "$NODEPOOL_EXTRA_VARS"
    ansible_install sf-storyboard "${STORYBOARD_EXTRA_VARS}"
    ansible_install sf-storyboard-webclient "${STORYBOARD_WEBCLIENT_EXTRA_VARS}"
    ansible_install sf-mirror "${MIRROR2SWIFT_EXTRA_VARS}"
    ansible_install sf-elasticsearch "${ELASTICSEARCH_EXTRA_VARS}"
    ansible_install sf-logstash "${LOGSTASH_EXTRA_VARS}"
    ansible_install sf-kibana "${KIBANA_EXTRA_VARS}"
    ansible_install sf-mosquitto
    ansible_install sf-job-logs-gearman-client "log_gearman_client_url: \"${LOG_GEARMAN_CLIENT_URL}\""
    ansible_install sf-job-logs-gearman-worker "log_gearman_worker_url: \"${LOG_GEARMAN_WORKER_URL}\""
    ansible_install sf-repoxplorer
    install_sf
    checkpoint "sf installed"
    image_clean
    checkpoint "image cleaned"
    put_git_mark ${dir}
}

build_all
