#!/usr/bin/env python
#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# This hook will update a Redmine issue by:
# - changing its status to closed
# - add an issue note with :
#   - The review URL
#   - The submitter name
#   - The URL of the commit in cgit/gitweb using the commit id
#   - Branch
#   - Full commit message

# https://gerrit-documentation.storage.googleapis.com/\
#        Documentation/2.8.1/config-hooks.html

# Gerrit will call the hook with the following options:
# patchset-created --change <change id>
#                  --change-url <change url>
#                  --project <project name>
#                  --branch <branch>
#                  --topic <topic>
#                  --submitter <uploader>
#                  --commit <sha1>

import os
import sys

from pysflib.hooks import sfgerrit as hooks


# Look for the config in the Gerrit hooks directory
HOOKS_CONFIG = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'hooks.config')

MESSAGE = """The following change on Gerrit has been merged to: %(branch)s
Review: %(url)s
Submitter: %(submitter)s

Commit message:
%(commit)s

gitweb: %(gitweb)s
"""


arguments = ('change', 'change-url', 'project',
             'branch', 'topic', 'submitter', 'commit')


class ChangeMergedHook(hooks.GerritHook):
    def __init__(self):
        super(ChangeMergedHook, self).__init__(arguments,
                                               file(HOOKS_CONFIG))
        self.status_closing = 5
        self.status_related = 2
        self.msg = MESSAGE


if __name__ == "__main__":
    if not os.path.isfile(HOOKS_CONFIG):
        hooks.logger.error("Unable to find hooks config !")
        sys.exit(0)

    merged_hook = ChangeMergedHook()
    args = merged_hook.get_parser().parse_args()
    hooks.logger.debug("Patchset merged with %r" % args)
    try:
        e = merged_hook.main(args)
        sys.exit(e)
    except Exception as e:
        hooks.logger.error(e)
        sys.exit(1)
