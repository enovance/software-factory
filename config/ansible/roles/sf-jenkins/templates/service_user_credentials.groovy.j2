import jenkins.model.Jenkins;
import com.cloudbees.plugins.credentials.impl.*;
import com.cloudbees.plugins.credentials.*;
import com.cloudbees.plugins.credentials.domains.*;

def creds_lookup = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
    com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,
    Jenkins.instance)

def c = creds_lookup.findResult { it.username == "SF_SERVICE_USER" ? it : null }

def creds_store = SystemCredentialsProvider.getInstance().getStore()

if ( c ) {
    String uuid = c.id
    creds_store.updateCredentials(
        Domain.global(),
        c,
        new UsernamePasswordCredentialsImpl(c.scope, uuid, c.description, c.username, "{{ sf_service_user_password }}"))
    println uuid
} else {
    // For ease of use, hard-code UUID. It's already the case with the slaves key ...
    // String uuid = java.util.UUID.randomUUID().toString()
    String uuid = "900936e8-a4e0-483e-8ab8-07bca5f80699"
    Credentials newc = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, uuid, "SF Service User credentials for automated tasks", "SF_SERVICE_USER", "{{ sf_service_user_password }}")
    creds_store.addCredentials(Domain.global(), newc)
    println uuid
}
