#!/bin/bash

set -e

### This script is at the moment executed in the Jenkins master node.
### This is temporary and most of the code here will land in sfmanager.
### Futhermore as suggested in the review comment the futur sfmanager
### resources get/post/put will be called through the
### sf-config-update mechanism

FQDN="{{ fqdn }}"
GATEWAY_URL="{{ gateway_url }}"
ENDPOINT="$GATEWAY_URL/manage/resources/"
SPASS={{ creds_sf_service_user_pwd }}

COOKIE_PATH=cookie
APPLIED_OUTPUT="applied-output"
VALIDATED_OUTPUT="validated-output"

trap "rm -f $COOKIE_PATH && rm -f $VALIDATED_OUTPUT && rm -f $APPLIED_OUTPUT" EXIT

[ -z "$1" ] && {
    echo "Valid arguments are validate, apply, direct_apply, get, get_missing_resources. Exit."
    exit 1
}

[ "$1" == "direct_apply" ] && {
    [ ! -f "$2" -a ! -f "$3" ] && {
        echo "direct_apply action needs two yaml files as second and third args"
        echo "$(basename $0) direct_apply prev.yaml new.yaml"
        exit 1
    } || {
        rm -f direct_apply.json
        python <<SCRIPT
import json
data = {}
data['prev'] = file("$2").read()
data['new'] = file("$3").read()
json.dump(data, file('direct_apply.json', 'w'))
SCRIPT
    }
}

curl -s -X POST -c $COOKIE_PATH --data \
 '{"back": "/", "method": "Password", "args": {"username": "_SF_SERVICE_USER_", "password": "'$SPASS'"}}' \
 -H "Content-Type: application/json" $GATEWAY_URL/auth/login/
[ ! -f $COOKIE_PATH ] && {
    echo "Unable to get a cookie ..."
    exit 1
}
case $1 in
    validate)
        [ -z "$ZUUL_URL" -o -z "$ZUUL_REF" ] && {
            echo "ZUUL_URL and ZUUL_REF need to set. Exit."
            exit 1
        }
        http_code=$(curl -s -w "%{http_code}" -b $COOKIE_PATH \
         -H "Content-Type: application/json" \
         -d '{"zuul_url": "'$ZUUL_URL'/config", "zuul_ref": "'$ZUUL_REF'"}' \
         -X POST $ENDPOINT -o $VALIDATED_OUTPUT)
        cat $VALIDATED_OUTPUT | python -m json.tool
        [ "$http_code" != "200" ] && {
            echo "Resource modifications validation failed (API return code: $http_code)."
            exit 1
        }
        [ -d "$WORKSPACE/config/.git" ] && {
            cd $WORKSPACE/config
            git log -1 --no-merges
            if git log -1 --no-merges | grep "sf-resources: skip-apply" > /dev/null; then
                echo
                echo "The commit msg tag: 'sf-resources: skip-apply' has been detected."
                echo "The approval of this patch won't trigger the creation of the resources above."
                echo "The purpose of this commit is usually to re-sync config/resources with the reality."
            fi
        } || {
            echo "Script ran outside of a job workspace."
        }
        exit 0
        ;;
    apply)
        clone=$(mktemp -d)
        git clone $GATEWAY_URL/r/config $clone
        cd $clone
        if git log -1 --no-merges | grep "sf-resources: skip-apply" > /dev/null; then
            echo
            echo "The commit msg tag: 'sf-resources: skip-apply' has been detected."
            echo "Skip resources apply."
            rm -R $clone
            exit 0
        fi
        cd -
        rm -R $clone
        http_code=$(curl -s -w "%{http_code}" -b $COOKIE_PATH \
         -X PUT $ENDPOINT -o $APPLIED_OUTPUT)
        cat $APPLIED_OUTPUT | python -m json.tool
        [ "$http_code" != "201" ] && {
            echo "Resource modifications apply failed (API return code: $http_code)."
            exit 1
        }
        exit 0
        ;;
    direct_apply)
        http_code=$(curl -s -w "%{http_code}" -b $COOKIE_PATH \
         -H "Content-Type: application/json" \
         --data @direct_apply.json \
         -X PUT $ENDPOINT -o $APPLIED_OUTPUT)
        cat $APPLIED_OUTPUT | python -m json.tool
        [ "$http_code" != "201" ] && {
            echo "Resource modifications direct_apply failed (API return code: $http_code)."
            exit 1
        }
        exit 0
        ;;
    get)
        curl -s -b $COOKIE_PATH $ENDPOINT | python -m json.tool
        ;;
    get_missing_resources)
        curl -s -b $COOKIE_PATH "$ENDPOINT?get_missing_resources=true" -o missing_resources.json
        python <<SCRIPT
import json
import yaml

# Be sure multiline are pretty represented
def str_presenter(dumper, data):
  if len(data.splitlines()) > 1:  # check for multiline string
    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')
  return dumper.represent_scalar('tag:yaml.org,2002:str', data)

yaml.add_representer(unicode, str_presenter)
yaml.add_representer(str, str_presenter)
data = json.load(file('missing_resources.json'))
s = yaml.dump(data[1], default_flow_style=False)
file('missing_resources.yaml', 'w').write(s)
if data[0]:
    print "It appears some issues occured during data fetching:"
for log in data[0]:
    print log
    print "---"
print "YAML file to submit as a review to the config repo is : missing_resources.yaml"
SCRIPT
        [ "$2" == "submit" ] && {
            clone=$(mktemp -d)
            msg=$(mktemp)
            git clone git+ssh://$FQDN/config $clone
            cp missing_resources.yaml $clone/resources/missing_resources_$(date +%s).yaml
            cat > $msg << EOF
Propose missing resources to the config repo

This change should be approved as it is then
once merged fell free to re-organize as you want.

sf-resources: skip-apply
EOF
            (
                cd $clone
                git add -A
                git commit -F $msg
                git review
            )
            rm -R $clone
            rm $msg
        } || {
            echo "You can automatically propose the file as review by running:"
            echo "$(basename $0) get_missing_resources submit"
        }
        ;;
    *)
        echo "Action not supported."
        ;;
esac

